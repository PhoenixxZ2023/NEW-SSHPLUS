#!/bin/bash
# EDIT: @TURBONET2023, adaptado para XRay por Grok
# github: https://github.com/PhoenixxZ2023/NEW-SSHPLUS
# MODIFICAÇÃO FINAL: Comando 'xray new' desativado E patch em tempo real no go1.sh.

# Horário de tarefas agendadas (0~23, horário de São Paulo, Brasil)
SAO_PAULO_UPDATE_TIME=3

# Caminho inicial do script
BEGIN_PATH=$(pwd)

# Modo de instalação: 0 para nova, 1 para manter configurações
INSTALL_WAY=0

# Variáveis de controle: 0 para não, 1 para sim
HELP=0
REMOVE=0
CHINESE=0

# URLs base
BASE_SOURCE_PATH="https://multi.netlify.app"
UTIL_PATH="/etc/xray_util/util.cfg"
UTIL_CFG="$BASE_SOURCE_PATH/v2ray_util/util_core/util.cfg"
BASH_COMPLETION_SHELL="$BASE_SOURCE_PATH/v2ray"
CLEAN_IPTABLES_SHELL="$BASE_SOURCE_PATH/v2ray_util/global_setting/clean_iptables.sh"

# URL do script go.sh modificado (ajustado para XRay)
XRAY_INSTALL_URL="https://raw.githubusercontent.com/PhoenixxZ2023/NEW-SSHPLUS/main/Modulos/go1.sh"

# Cancelar aliases no CentOS
[[ -f /etc/redhat-release && -z $(echo $SHELL|grep zsh) ]] && unalias -a

# Definir arquivo de ambiente (Bash ou Zsh)
[[ -z $(echo $SHELL|grep zsh) ]] && ENV_FILE=".bashrc" || ENV_FILE=".zshrc"

####### Códigos de cores #######
RED="31m"
GREEN="32m"
YELLOW="33m"
BLUE="36m"
FUCHSIA="35m"

colorEcho(){
    COLOR=$1
    echo -e "\033[${COLOR}${@:2}\033[0m"
}

####### Processar parâmetros #######
while [[ $# > 0 ]]; do
    key="$1"
    case $key in
        --remove)
        REMOVE=1
        ;;
        -h|--help)
        HELP=1
        ;;
        -k|--keep)
        INSTALL_WAY=1
        colorEcho ${BLUE} "Manter configurações para atualizar\n"
        ;;
        --zh)
        CHINESE=1
        colorEcho ${BLUE} "Instalando em chinês..\n"
        ;;
        *)
        ;;
    esac
    shift
done

#############################

help(){
    echo "bash xray.sh [-h|--help] [-k|--keep] [--remove]"
    echo "  -h, --help            Mostrar ajuda"
    echo "  -k, --keep            Manter configurações para atualizar"
    echo "      --remove          Remover XRay e xray_util"
    echo "                      Sem parâmetros: nova instalação"
    return 0
}

removeXRay() {
    # Desinstalar XRay
    bash <(curl -L -s "$XRAY_INSTALL_URL") --remove >/dev/null 2>&1
    rm -rf /etc/xray >/dev/null 2>&1
    rm -rf /var/log/xray >/dev/null 2>&1

    # Limpar regras de iptables
    bash <(curl -L -s $CLEAN_IPTABLES_SHELL)

    # Desinstalar xray_util
    pip uninstall v2ray_util -y
    rm -rf /usr/share/bash-completion/completions/xray >/dev/null 2>&1
    rm -rf /etc/xray_util >/dev/null 2>&1
    rm -rf /usr/local/bin/xray >/dev/null 2>&1

    # Remover tarefas agendadas
    crontab -l|sed '/SHELL=/d;/xray/d' > crontab.txt
    crontab crontab.txt >/dev/null 2>&1
    rm -f crontab.txt >/dev/null 2>&1

    if [[ ${PACKAGE_MANAGER} == 'dnf' || ${PACKAGE_MANAGER} == 'yum' ]]; then
        systemctl restart crond >/dev/null 2>&1
    else
        systemctl restart cron >/dev/null 2>&1
    fi

    # Limpar variáveis de ambiente
    sed -i '/xray/d' ~/$ENV_FILE
    source ~/$ENV_FILE

    colorEcho ${GREEN} "XRay desinstalado com sucesso!"
}

closeSELinux() {
    # Desativar SELinux
    if [ -s /etc/selinux/config ] && grep 'SELINUX=enforcing' /etc/selinux/config; then
        sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
        setenforce 0
    fi
    if command -v getenforce >/dev/null && [ "$(getenforce)" = "Enforcing" ]; then
        colorEcho ${YELLOW} "SELinux ainda ativo. Forçando desativação."
        setenforce 0
        if [ $? -ne 0 ]; then
            colorEcho ${RED} "Falha ao desativar SELinux. Pode causar problemas de permissão."
        fi
    fi
}

checkSys() {
    # Verificar se é root
    [ $(id -u) != "0" ] && { colorEcho ${RED} "Erro: Você deve ser root para executar este script"; exit 1; }

    # Identificar gerenciador de pacotes
    if [[ `command -v apt-get` ]]; then
        PACKAGE_MANAGER='apt-get'
    elif [[ `command -v dnf` ]]; then
        PACKAGE_MANAGER='dnf'
    elif [[ `command -v yum` ]]; then
        PACKAGE_MANAGER='yum'
    else
        colorEcho $RED "Sistema não suportado!"
        exit 1
    fi
}

installDependent(){
    if [[ ${PACKAGE_MANAGER} == 'dnf' || ${PACKAGE_MANAGER} == 'yum' ]]; then
        ${PACKAGE_MANAGER} install socat crontabs bash-completion which -y
    else
        ${PACKAGE_MANAGER} update
        ${PACKAGE_MANAGER} install socat cron bash-completion ntpdate -y
    fi

    # Instalar Python3 e pip
    source <(curl -sL https://python3.netlify.app/install.sh)
    if ! command -v pip >/dev/null 2>&1; then
        colorEcho ${RED} "Falha ao instalar pip. Instale Python e pip manualmente."
        exit 1
    fi
}

updateProject() {
    # Verificar pip
    [[ ! $(type pip 2>/dev/null) ]] && colorEcho $RED "pip não instalado!" && exit 1

    # Limpar instalações anteriores
    if [[ ${INSTALL_WAY} == 0 ]]; then
        colorEcho ${BLUE} "Limpando instalações anteriores do XRay..."
        rm -rf /usr/bin/xray /usr/local/bin/xray >/dev/null 2>&1
    fi

    # Instalar/atualizar v2ray_util (compatível com XRay)
    pip install -U v2ray_util
    if ! pip show v2ray_util >/dev/null 2>&1; then
        colorEcho ${RED} "Falha ao instalar v2ray_util. Verifique a instalação do pip."
        exit 1
    fi

    # Configurar utilitário
    if [[ -e $UTIL_PATH ]]; then
        [[ -z $(cat $UTIL_PATH|grep lang) ]] && echo "lang=en" >> $UTIL_PATH
    else
        mkdir -p /etc/xray_util
        curl $UTIL_CFG > $UTIL_PATH
    fi
    [[ $CHINESE == 1 ]] && sed -i "s/lang=en/lang=zh/g" $UTIL_PATH

    # Criar link simbólico
    rm -f /usr/local/bin/xray >/dev/null 2>&1
    ln -s $(which v2ray-util) /usr/local/bin/xray

    # Atualizar bash completion
    rm -f /usr/share/bash-completion/completions/xray >/dev/null 2>&1
    curl $BASH_COMPLETION_SHELL > /usr/share/bash-completion/completions/xray
    if [[ -z $(echo $SHELL|grep zsh) ]]; then
        source /usr/share/bash-completion/completions/xray
    fi

    # Instalar XRay
    if [[ ${INSTALL_WAY} == 0 ]]; then
        # A linha abaixo foi modificada para corrigir o script go1.sh em tempo real,
        # adicionando "alterId": 0 para evitar o erro de 'KeyError'.
        curl -L -s "$XRAY_INSTALL_URL" | sed 's/"level": 0/"level": 0,\n          "alterId": 0/' | bash -s -- -x
        
        if [[ $? -ne 0 ]]; then
            colorEcho ${RED} "Falha ao instalar XRay. Verifique a rede ou o script em $XRAY_INSTALL_URL."
            exit 1
        fi
    fi
}

timeSync() {
    if [[ ${INSTALL_WAY} == 0 ]]; then
        colorEcho ${BLUE} "Sincronizando horário para São Paulo, Brasil..."
        # Configurar fuso horário
        timedatectl set-timezone America/Sao_Paulo
        if [[ $? -ne 0 ]]; then
            colorEcho ${YELLOW} "Falha ao configurar fuso horário. Configurando manualmente..."
            ln -sf /usr/share/zoneinfo/America/Sao_Paulo /etc/localtime
        fi
        # Sincronizar horário
        if [[ `command -v ntpdate` ]]; then
            ntpdate a.st1.ntp.br
        elif [[ `command -v chronyc` ]]; then
            chronyc -a makestep
        fi
        if [[ $? -eq 0 ]]; then 
            colorEcho ${GREEN} "Sincronização bem-sucedida"
            colorEcho ${GREEN} "Agora: `date -R`"
        else
            colorEcho ${YELLOW} "Falha na sincronização. Tentando servidor alternativo..."
            ntpdate b.st1.ntp.br
            if [[ $? -eq 0 ]]; then
                colorEcho ${GREEN} "Sincronização bem-sucedida com servidor alternativo"
                colorEcho ${GREEN} "Agora: `date -R`"
            else
                colorEcho ${RED} "Falha na sincronização com servidores NTP. Verifique a rede."
            fi
        fi
    fi
}

profileInit() {
    # Limpar variáveis de ambiente
    [[ $(grep xray ~/$ENV_FILE) ]] && sed -i '/xray/d' ~/$ENV_FILE && source ~/$ENV_FILE
    [[ -z $(grep PYTHONIOENCODING=utf-8 ~/$ENV_FILE) ]] && echo "export PYTHONIOENCODING=utf-8" >> ~/$ENV_FILE && source ~/$ENV_FILE

    # Configurar XRay
    # A linha abaixo foi desativada para impedir que a configuração VLESS seja sobrescrita por VMess.
    # [[ ${INSTALL_WAY} == 0 ]] && xray new
}

installFinish() {
    cd ${BEGIN_PATH}
    [[ ${INSTALL_WAY} == 0 ]] && WAY="instalação" || WAY="atualização"
    colorEcho ${GREEN} "XRay ${WAY} concluída com sucesso!\n"

    if [[ ${INSTALL_WAY} == 0 ]]; then
        clear
        echo -e "\n\033[1;32mXRAY INSTALADO COM SUCESSO!\033[0m"
        xray info
        echo -e "Use o comando 'xray' para gerenciar o XRay\n"
    fi
}

installXRay(){
    mkdir -p /etc/xray /var/log/xray && \
    unzip -oj "$1" "$2xray" "$2geoip.dat" "$2geosite.dat" -d /usr/bin/xray && \
    chmod +x /usr/bin/xray/xray || {
        colorEcho ${red} "Falha ao copiar binários e recursos do XRay."
        return 1
    }

    if [ ! -f /etc/xray/config.json ]; then
        local port="$(($RANDOM + 10000))"
        local uuid="$(cat '/proc/sys/kernel/random/uuid')"
        cat > /etc/xray/config.json <<EOF
{
  "inbounds": [{
    "port": ${port},
    "protocol": "vmess",
    "settings": {
      "clients": [
        {
          "id": "${uuid}",
          "level": 1,
          "alterId": 64
        }
      ]
    }
  }],
  "outbounds": [{
    "protocol": "freedom",
    "settings": {}
  },{
    "protocol": "blackhole",
    "settings": {},
    "tag": "blocked"
  }],
  "routing": {
    "rules": [
      {
        "type": "field",
        "ip": ["geoip:private"],
        "outboundTag": "blocked"
      }
    ]
  }
}
EOF
        colorEcho ${blue} "Porta: ${port}"
        colorEcho ${blue} "UUID: ${uuid}"
    fi
}

main() {
    [[ ${HELP} == 1 ]] && help && return
    [[ ${REMOVE} == 1 ]] && removeXRay && return
    [[ ${INSTALL_WAY} == 0 ]] && colorEcho ${BLUE} "Nova instalação\n"

    checkSys
    installDependent
    closeSELinux
    timeSync
    updateProject
    profileInit
    installFinish
}

main
