#!/bin/bash

# Função para verificar portas (adaptada de verif_ptrs)
verif_ptrs() {
    local port=$1
    if ss -tuln | grep -q ":$port "; then
        echo -e "\033[1;31mPorta $port já está em uso!"
        ss -tulnp | grep ":$port "
        sleep 3
        return 1
    fi
    return 0
}

# Função para exibir barra de progresso (adaptada de fun_bar)
fun_bar() {
    local command=$1
    local duration=2
    echo -ne "\033[1;32m["
    while [[ $duration -gt 0 ]]; do
        echo -ne "="
        sleep 0.5
        duration=$((duration - 1))
    done
    echo -ne "]\033[0m\n"
    eval "$command" >/dev/null 2>&1
}

# Função para corrigir SSL CLARO
fix_ssl_claro() {
    echo -e "\033[1;32mCorrigindo SSL CLARO\033[0m"
    cd /usr/local/etc/stunnel/
    # Fazer backup da configuração atual
    cp stunnel.conf stunnel.conf.bak
    cp stunnel.pem stunnel.pem.bak
    rm -f stunnel.conf stunnel.pem
    # Baixar arquivos
    wget -q https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Install/cert -O cert.pem
    wget -q https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Install/key -O key.pem
    wget -q https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Install/stunnel -O stunnel.conf
    if [[ $? -ne 0 ]]; then
        echo -e "\033[1;31mErro ao baixar arquivos do SSL CLARO. Restaurando configuração original.\033[0m"
        mv stunnel.conf.bak stunnel.conf
        mv stunnel.pem.bak stunnel.pem
        sleep 3
        return 1
    fi
    # Ajustar permissões
    chmod 600 cert.pem key.pem stunnel.conf
    # Combinar certificados
    cat cert.pem key.pem > stunnel.pem
    rm -f cert.pem key.pem
    # Verificar porta com grep
    if grep -q "^accept = $PORT" stunnel.conf; then
        echo -e "\033[1;32mPorta $PORT mantida na configuração do SSL CLARO.\033[0m"
    else
        echo -e "\033[1;33mAjustando porta para $PORT na configuração do SSL CLARO.\033[0m"
        sed -i "s/accept = .*/accept = $PORT/" stunnel.conf
    fi
    # Reiniciar serviço
    systemctl restart stunnel5
    if [[ $? -eq 0 ]] && ss -tlnp | grep 'stunnel' >/dev/null; then
        echo -e "\033[1;32mSSL CLARO corrigido com sucesso!\033[0m"
        rm -f stunnel.conf.bak stunnel.pem.bak
    else
        echo -e "\033[1;31mErro ao reiniciar stunnel5 com SSL CLARO. Restaurando configuração original.\033[0m"
        mv stunnel.conf.bak stunnel.conf
        mv stunnel.pem.bak stunnel.pem
        systemctl restart stunnel5
        sleep 3
        return 1
    fi
    cd $HOME
    sleep 2
}

# Função principal para gerenciar stunnel5
inst_ssl5() {
    # Verificar se stunnel5 está ativo
    if ss -tlnp | grep 'stunnel' >/dev/null 2>&1; then
        # Extrair porta (adaptado do trecho fornecido)
        [[ $(ss -tlnp | grep 'stunnel' | wc -l) != '0' ]] && sslt=$(ss -tlnp | grep 'stunnel' | awk '{print $4}' | awk -F ":" '{print $NF}' | head -1) || sslt="\033[1;31mINDISPONÍVEL"
        clear
        echo -e "\E[44;1;37m              GERENCIAR SSL TUNNEL 5               \E[0m"
        echo -e "\n\033[1;33mPORTAS\033[1;37m: \033[1;32m$sslt"
        echo ""
        echo -e "\033[1;31m[\033[1;36m1\033[1;31m] \033[1;37m• \033[1;33mALTERAR PORTA SSL TUNNEL\033[0m"
        echo -e "\033[1;31m[\033[1;36m2\033[1;31m] \033[1;37m• \033[1;33mREMOVER SSL TUNNEL\033[0m"
        echo -e "\033[1;31m[\033[1;36m0\033[1;31m] \033[1;37m• \033[1;33mVOLTAR\033[0m"
        echo ""
        echo -ne "\033[1;32mO QUE DESEJA FAZER \033[1;33m?\033[1;37m "
        read resposta
        echo ""
        [[ "$resposta" = '1' ]] && {
            echo -ne "\033[1;32mQUAL PORTA DESEJA UTILIZAR \033[1;33m?\033[1;37m "
            read porta
            echo ""
            [[ -z "$porta" ]] && {
                echo -e "\033[1;31mPorta inválida!"
                sleep 2
                clear
                inst_ssl5
            }
            verif_ptrs "$porta" || {
                clear
                inst_ssl5
            }
            echo -e "\033[1;32mALTERANDO PORTA SSL TUNNEL!"
            var2=$(grep '^accept' /usr/local/etc/stunnel/stunnel.conf | awk '{print $NF}')
            sed -i "s/accept = .*/accept = $porta/" /usr/local/etc/stunnel/stunnel.conf
            echo ""
            fun_bar 'sleep 2'
            echo ""
            echo -e "\033[1;32mREINICIANDO SSL TUNNEL!\n"
            fun_bar 'systemctl restart stunnel5'
            echo ""
            ss -tlnp | grep 'stunnel' >/dev/null && echo -e "\033[1;32mPORTA ALTERADA COM SUCESSO!" || echo -e "\033[1;31mERRO INESPERADO!"
            # Verificar com grep
            if grep -q "^accept = $porta" /usr/local/etc/stunnel/stunnel.conf; then
                echo -e "\033[1;32mNova porta $porta confirmada."
            else
                echo -e "\033[1;31mErro: Porta $porta não configurada."
            fi
            sleep 3.5
            clear
            inst_ssl5
        }
        [[ "$resposta" = '2' ]] && {
            echo -e "\033[1;32mREMOVENDO O SSL TUNNEL 5!\033[0m"
            del_ssl5() {
                systemctl stop stunnel5
                systemctl disable stunnel5
                rm /etc/systemd/system/stunnel5.service
                systemctl daemon-reload
                rm /usr/local/bin/stunnel
                rm /usr/local/bin/stunnel5
                rm -rf /usr/local/etc/stunnel
                rm -rf /usr/local/var/run/stunnel.pid
                rmdir /usr/local/var/run 2>/dev/null
                rm -rf /usr/local/lib/stunnel
                rm -rf /usr/local/share/stunnel
                rm -rf /usr/local/man/man8/stunnel*
            }
            echo ""
            fun_bar 'del_ssl5'
            echo ""
            echo -e "\033[1;32mSSL TUNNEL 5 REMOVIDO COM SUCESSO!\033[0m"
            sleep 3
            clear
            inst_ssl5
        }
        [[ "$resposta" = '0' ]] && {
            echo -e "\033[1;31mRetornando...\033[0m"
            sleep 3
            clear
            inst_ssl5
        }
    else
        clear
        echo -e "\E[44;1;37m              INSTALAR SSL TUNNEL 5               \E[0m"
        echo ""
        echo -e "\033[1;31m[\033[1;36m1\033[1;31m] \033[1;37m• \033[1;33mINSTALAR SSL TUNNEL PADRÃO\033[0m"
        echo -e "\033[1;31m[\033[1;36m2\033[1;31m] \033[1;37m• \033[1;33mINSTALAR SSL TUNNEL WEBSOCKET\033[0m"
        echo -e "\033[1;31m[\033[1;36m0\033[1;31m] \033[1;37m• \033[1;33mVOLTAR\033[0m"
        echo ""
        echo -ne "\033[1;32mO QUE DESEJA FAZER \033[1;33m?\033[1;37m "
        read resposta
        echo ""
        if [[ "$resposta" = '1' ]]; then
            portssl='22'
        elif [[ "$resposta" = '2' ]]; then
            portssl='80'
        elif [[ "$resposta" = '0' ]]; then
            echo -e "\033[1;31mRetornando...\033[0m"
            sleep 3
            clear
            inst_ssl5
        else
            echo -e "\033[1;31mOpção inválida!\033[0m"
            sleep 1
            inst_ssl5
        fi
        clear
        echo -e "\E[44;1;37m           INSTALADOR SSL TUNNEL 5             \E[0m"
        echo -e "\n\033[1;33mVOCÊ ESTÁ PRESTES A INSTALAR O SSL TUNNEL 5!\033[0m"
        echo ""
        echo -ne "\033[1;32mDESEJA CONTINUAR \033[1;31m? \033[1;33m[s/n]:\033[1;37m "
        read confirm
        [[ "$confirm" = 's' ]] && {
            echo -e "\n\033[1;33mDEFINA UMA PORTA PARA O SSL TUNNEL 5!\033[0m"
            echo ""
            read -p "$(echo -e "\033[1;32mQUAL PORTA DESEJA UTILIZAR? \033[1;37m")" -e -i 443 porta
            [[ -z "$porta" ]] && {
                echo -e "\033[1;31mPorta inválida!"
                sleep 3
                clear
                inst_ssl5
            }
            verif_ptrs "$porta" || {
                clear
                inst_ssl5
            }
            echo -e "\n\033[1;32mINSTALANDO O SSL TUNNEL 5!\033[1;33m"
            echo ""
            fun_bar 'apt-get update -y' 'apt-get install -y git build-essential libssl-dev autoconf automake libtool m4 autoconf-archive pkg-config'
            echo -e "\n\033[1;32mCOMPILANDO STUNNEL 5!\033[0m"
            compile_stunnel5() {
                rm -rf /tmp/stunnel
                git clone https://github.com/mtrojnar/stunnel.git /tmp/stunnel
                cd /tmp/stunnel
                git checkout tags/stunnel-5.74
                aclocal
                autoreconf -fi
                ./configure
                make
                make install
                cd /tmp
                rm -rf /tmp/stunnel
            }
            fun_bar 'compile_stunnel5'
            echo -e "\n\033[1;32mCONFIGURANDO O SSL TUNNEL 5!\033[0m"
            ssl_conf() {
                mkdir -p /usr/local/etc/stunnel
                echo -e "pid = /usr/local/var/run/stunnel.pid\ncert = /usr/local/etc/stunnel/stunnel.pem\nclient = no\n\n[stunnel]\naccept = ${porta}\nconnect = 127.0.0.1:${portssl}" >/usr/local/etc/stunnel/stunnel.conf
            }
            fun_bar 'ssl_conf'
            echo -e "\n\033[1;32mCRIANDO CERTIFICADO!\033[0m"
            ssl_certif() {
                openssl genrsa -out /usr/local/etc/stunnel/key.pem 2048
                openssl req -new -x509 -key /usr/local/etc/stunnel/key.pem -out /usr/local/etc/stunnel/cert.pem -days 1050 -subj "/C=US/ST=State/L=City/O=Organization/OU=Unit/CN=localhost"
                cat /usr/local/etc/stunnel/cert.pem /usr/local/etc/stunnel/key.pem >/usr/local/etc/stunnel/stunnel.pem
                rm /usr/local/etc/stunnel/key.pem /usr/local/etc/stunnel/cert.pem
                chmod 600 /usr/local/etc/stunnel/stunnel.pem
            }
            fun_bar 'ssl_certif'
            echo -e "\n\033[1;32mCRIANDO SERVIÇO STUNNEL 5!\033[0m"
            create_service() {
                mkdir -p /usr/local/var/run
                chmod 755 /usr/local/var/run
                cat >/etc/systemd/system/stunnel5.service <<EOF
[Unit]
Description=stunnel5 TLS Tunneling Service
After=network.target

[Service]
Type=forking
ExecStart=/usr/local/bin/stunnel /usr/local/etc/stunnel/stunnel.conf
PIDFile=/usr/local/var/run/stunnel.pid
Restart=always
TimeoutStartSec=300

[Install]
WantedBy=multi-user.target
EOF
                systemctl daemon-reload
                systemctl enable stunnel5
                systemctl start stunnel5
            }
            fun_bar 'create_service'
            echo -e "\n\033[1;32mINICIANDO O SSL TUNNEL 5!\033[0m"
            fun_bar 'systemctl restart stunnel5'
            # Verificar com grep
            if grep -q "^accept = $porta" /usr/local/etc/stunnel/stunnel.conf; then
                echo -e "\033[1;32mPorta $porta configurada corretamente."
            else
                echo -e "\033[1;31mErro: Porta $porta não configurada."
                sleep 3
                exit 1
            }
            # Verificar processos
            if ps aux | grep -q '[s]tunnel'; then
                echo -e "\033[1;32mProcesso stunnel detectado:"
                ps aux | grep '[s]tunnel'
            else
                echo -e "\033[1;31mErro: Nenhum processo stunnel detectado."
                systemctl status stunnel5
                sleep 3
                exit 1
            }
            # Verificar porta (adaptado do trecho)
            if [[ $(ss -tlnp | grep 'stunnel' | wc -l) != '0' ]]; then
                SSL_PORT=$(ss -tlnp | grep 'stunnel' | awk '{print $4}' | awk -F ":" '{print $NF}' | head -1)
                echo -e "\033[1;32mSSL TUNNEL 5 INSTALADO COM SUCESSO! \033[1;31mPORTA: \033[1;33m$SSL_PORT\033[0m"
            else
                echo -e "\033[1;31mERRO INESPERADO!"
                systemctl status stunnel5
                sleep 3
                exit 1
            }
            # Aplicar SSL CLARO
            PORT=$porta
            fix_ssl_claro
            # Instalar comando stunnel5
            echo -e "\n\033[1;32mINSTALANDO COMANDO STUNNEL5!\033[0m"
            cp "$0" /usr/local/bin/stunnel5
            chmod +x /usr/local/bin/stunnel5
            echo -e "\033[1;32mUse 'stunnel5' para gerenciar!\033[0m"
            sleep 3
            clear
            inst_ssl5
        } || {
            echo -e "\n\033[1;31mRetornando...\033[0m"
            sleep 2
            clear
            inst_ssl5
        }
    fi
}

# Executar
inst_ssl5
