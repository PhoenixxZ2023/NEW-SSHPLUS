#!/bin/bash
#====================================================
#	@TURBONET2023
#	Gerenciador XRay, idêntico ao v2raymanager.sh
#====================================================

# Cores
cor1='\033[41;1;37m'
cor2='\033[44;1;37m'
scor='\033[0m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
SCOLOR='\033[0m'

# Mensagens de erro
msg01='\033[1;37m\033[1;33mUSUÁRIO NULO\033[1;31m'
msg02='\033[1;37m\033[1;33mNOME MUITO CURTO (MÍN: 2 CARACTERES)\033[1;31m'
msg03='\033[1;37m\033[1;33mNOME MUITO LONGO (MÁX: 5 CARACTERES)\033[1;31m'
msg04='\033[1;37m\033[1;33mSENHA NULA\033[1;31m'
msg05='\033[1;37m\033[1;33mSENHA MUITO CURTA\033[1;31m'
msg06='\033[1;37m\033[1;33mSENHA MUITO LONGA\033[1;31m'
msg07='\033[1;37m\033[1;33mDURAÇÃO NULA\033[1;31m'
msg08='\033[1;37m\033[1;33mDURAÇÃO INVÁLIDA, USE NÚMEROS\033[1;31m'
msg09='\033[1;37m\033[1;33mDURAÇÃO MÁXIMA DE UM ANO\033[1;31m'
msg11='\033[1;37m\033[1;33mLIMITE NULO\033[1;31m'
msg12='\033[1;37m\033[1;33mLIMITE INVÁLIDO, USE NÚMEROS\033[1;31m'
msg13='\033[1;37m\033[1;33mLIMITE MÁXIMO DE 999\033[1;31m'
msg14='\033[1;37m\033[1;33mUSUÁRIO JÁ EXISTE\033[1;31m'
msg15='\033[1;37m\033[1;33m(APENAS NÚMEROS) GB = MÍN: 1GB MÁX: 1000GB\033[1;31m'
msg16='\033[1;37m\033[1;33m(APENAS NÚMEROS)\033[1;31m'
msg17='\033[1;37m\033[1;33m(SEM INFORMAÇÃO - PARA CANCELAR PRESSIONE CTRL + C)\033[1;31m'

# Função para mensagens de erro
err_fun() {
    case $1 in
        1) msg -verm "$(fun_trans "USUÁRIO NULO")" ;;
        2) msg -verm "$(fun_trans "NOME MUITO CURTO (MÍN: 2 CARACTERES)")" ;;
        3) msg -verm "$(fun_trans "NOME MUITO LONGO (MÁX: 5 CARACTERES)")" ;;
        4) msg -verm "$(fun_trans "SENHA NULA")" ;;
        5) msg -verm "$(fun_trans "SENHA MUITO CURTA")" ;;
        6) msg -verm "$(fun_trans "SENHA MUITO LONGA")" ;;
        7) msg -verm "$(fun_trans "DURAÇÃO NULA")" ;;
        8) msg -verm "$(fun_trans "DURAÇÃO INVÁLIDA, UTILIZE NÚMEROS")" ;;
        9) msg -verm "$(fun_trans "DURAÇÃO MÁXIMA DE UM ANO")" ;;
        11) msg -verm "$(fun_trans "LIMITE NULO")" ;;
        12) msg -verm "$(fun_trans "LIMITE INVÁLIDO, USE NÚMEROS")" ;;
        13) msg -verm "$(fun_trans "LIMITE MÁXIMO DE 999")" ;;
        14) msg -verm "$(fun_trans "USUÁRIO JÁ EXISTE")" ;;
        15) msg -verm "$(fun_trans "(APENAS NÚMEROS) GB = MÍN: 1GB MÁX: 1000GB")" ;;
        16) msg -verm "$(fun_trans "(APENAS NÚMEROS)")" ;;
        17) msg -verm "$(fun_trans "(SEM INFORMAÇÃO - PARA CANCELAR PRESSIONE CTRL + C)")" ;;
    esac
    sleep 2s
    tput cuu1 && tput dl1 && tput cuu1 && tput dl1
}

# Função para mensagens coloridas
msg() {
    case $1 in
        -verm) echo -e "${RED}${2}${SCOLOR}" ;;
        -azu) echo -e "${BLUE}${2}${SCOLOR}" ;;
        -verd) echo -e "${GREEN}${2}${SCOLOR}" ;;
        -ama) echo -e "${YELLOW}${2}${SCOLOR}" ;;
        *) echo -e "${2}" ;;
    esac
}

# Função de tradução (simplificada)
fun_trans() {
    echo "$1"
}

# Função de seleção de menu
selection_fun() {
    local selection="null"
    local range
    for ((i=0; i<=$1; i++)); do range[$i]="$i "; done
    while [[ ! $(echo ${range[*]} | grep -w "$selection") ]]; do
        echo -ne "\033[1;37m ► Selecione uma Opção: " >&2
        read selection
        tput cuu1 >&2 && tput dl1 >&2
    done
    echo $selection
}

# Variáveis de configuração
KEY="xray"
CONFIG_PATH="/etc/xray"
REG_PATH="/etc/SSHPlus/RegXray"
BACKUP_PATH="/etc/SSHPlus/xray"

# Verificar dependências
check_dependencies() {
    if ! command -v ${KEY} >/dev/null 2>&1; then
        echo -e "\033[1;31mErro: ${KEY} não está instalado ou o comando não está disponível.\033[0m"
        echo -e "\033[1;33mPor favor, instale o ${KEY} usando o script de instalação.\033[0m"
        exit 1
    fi
    if [[ ! -d ${CONFIG_PATH} ]]; then
        echo -e "\033[1;31mErro: Diretório de configuração ${CONFIG_PATH} não existe.\033[0m"
        exit 1
    fi
    if [[ ! -f ${CONFIG_PATH}/config.json ]]; then
        echo -e "\033[1;31mErro: Arquivo de configuração ${CONFIG_PATH}/config.json não existe.\033[0m"
        exit 1
    fi
    mkdir -p ${BACKUP_PATH} ${REG_PATH%/*}
    touch ${REG_PATH}
}

# Função para instalar XRay
intallxray() {
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[44;1;37m            INSTALANDO XRAY             \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    source <(curl -sL https://raw.githubusercontent.com/PhoenixxZ2023/NEW-SSHPLUS/main/Modulos/xray)
    if [[ $? -ne 0 ]]; then
        echo -e "\033[1;31mErro: Falha ao instalar XRAY.\033[0m"
        exit 1
    fi
    echo -e "\033[1;33mINSTALADO COM SUCESSO ✅!\033[0m"
    [[ ! -e ${REG_PATH} ]] && touch ${REG_PATH}
    sort ${REG_PATH} | uniq >${REG_PATH}tmp
    mv -f ${REG_PATH}tmp ${REG_PATH}
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    fun_xraymanager
}

# Função para editar protocolo
protocolxray() {
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[44;1;37m            EDITAR PROTOCOLO XRAY             \E[0m"
    echo -e "\033[1;37m• \033[1;33mESCOLHA A OPÇÃO 3 E COLOQUE SEU DOMÍNIO OU HOST. EX: T3MMA.COM\033[1;31m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    ${KEY} stream
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    fun_xraymanager
}

# Função para ativar/desativar TLS
tls() {
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[44;1;37m            ATIVAR OU DESATIVAR TLS             \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    ${KEY} tls
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    fun_xraymanager
}

# Função para editar porta
portx() {
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[44;1;37m            EDITAR PORTA XRAY             \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    ${KEY} port
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    fun_xraymanager
}

# Função para estatísticas de consumo
stats() {
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[44;1;37m            ESTATÍSTICAS DE CONSUMO             \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    ${KEY} stats
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    fun_xraymanager
}

# Função para desinstalar XRay
unistallx() {
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[44;1;37m            DESINSTALANDO XRAY             \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    source <(curl -sL https://raw.githubusercontent.com/PhoenixxZ2023/NEW-SSHPLUS/main/Modulos/xray) --remove >/dev/null 2>&1
    rm -rf ${REG_PATH} >/dev/null 2>&1
    rm -rf ${BACKUP_PATH} >/dev/null 2>&1
    echo -e "\033[1;32mXRAY REMOVIDO COM SUCESSO!\033[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    fun_xraymanager
}

# Função para informações da conta
infocuenta() {
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[44;1;37m            INFORMAÇÕES DA CONTA             \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    ${KEY} info
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    fun_xraymanager
}

# Função para adicionar usuário/UUID
addusr() {
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[44;1;37m            ADICIONAR USUÁRIO | UUID XRAY             \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    # Gerar UUID e e-mail aleatório
    UUID=$(uuidgen)
    USERMAIL=$(cat /dev/urandom | tr -dc '[:alnum:]' | head -c 10)
    
    # Solicitar nome do usuário
    while true; do
        echo -ne "\e[91m >> DIGITE UM USUÁRIO: \033[1;92m"
        read -p ": " nick
        nick="$(echo $nick | sed -e 's/[^a-z0-9 -]//ig')"
        [[ -z $nick ]] && err_fun 17 && continue
        [[ "${#nick}" -lt 2 ]] && err_fun 2 && continue
        [[ "${#nick}" -gt 5 ]] && err_fun 3 && continue
        [[ $(grep -w "$nick" ${REG_PATH} | cut -d '|' -f2) ]] && err_fun 14 && continue
        break
    done

    # Solicitar duração
    while true; do
        echo -ne "\e[91m >> DURAÇÃO DO UUID (DIAS): \033[1;92m" && read diasuser
        [[ -z "$diasuser" ]] && err_fun 17 && continue
        [[ "$diasuser" != +([0-9]) ]] && err_fun 8 && continue
        [[ "$diasuser" -gt 360 ]] && err_fun 9 && continue
        break
    done

    # Calcular data de expiração
    valid=$(date '+%C%y-%m-%d' -d "+$diasuser days")
    datexp=$(date "+%F" -d "+$diasuser days")

    # Adicionar usuário ao config.json (VLESS para XRay)
    sed -i "/\"clients\": \[/a\           \{" ${CONFIG_PATH}/config.json
    sed -i "/\"clients\": \[/a\           \"id\": \"$UUID\"," ${CONFIG_PATH}/config.json
    sed -i "/\"clients\": \[/a\           \"email\": \"$USERMAIL@gmail.com\"," ${CONFIG_PATH}/config.json
    sed -i "/\"clients\": \[/a\           \"level\": 1" ${CONFIG_PATH}/config.json
    sed -i "/\"clients\": \[/a\           \}," ${CONFIG_PATH}/config.json

    # Registrar usuário
    echo "  $UUID | $nick | $valid" >> ${REG_PATH}
    Fecha=$(date +%d-%m-%y-%R)
    cp ${REG_PATH} ${BACKUP_PATH}/RegXray-"$Fecha"

    # Reiniciar serviço
    systemctl restart ${KEY} >/dev/null 2>&1

    # Exibir informações
    echo -e "\e[91m >> ADICIONAR UUID: \e[92m$UUID"
    echo -e "\e[91m >> EXPIRA EM: \e[92m$datexp"
    ${KEY} info > ${BACKUP_PATH}/confuuid.log
    lineP=$(sed -n "/${UUID}/=" ${BACKUP_PATH}/confuuid.log)
    numl1=4
    let suma=$lineP+$numl1
    sed -n ${suma}p ${BACKUP_PATH}/confuuid.log
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\e[92m           UUID ADICIONADO COM SUCESSO"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    fun_xraymanager
}

# Função para remover usuário/UUID
delusr() {
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[44;1;37m            REMOVER USUÁRIO | UUID XRAY             \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    invaliduuid() {
        echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        echo -e "\e[91m                    UUID INVÁLIDO \n"
        echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
        fun_xraymanager
    }
    echo -e "\e[97m               USUÁRIOS REGISTRADOS"
    echo -e "\e[33m$(cat ${REG_PATH} | cut -d '|' -f2,1)"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -ne "\e[91m >> DIGITE UUID PARA REMOVER:\n \033[1;92m " && read uuidel
    [[ $(sed -n "/${uuidel}/=" ${CONFIG_PATH}/config.json | head -1) ]] || invaliduuid
    lineP=$(sed -n "/${uuidel}/=" ${CONFIG_PATH}/config.json)
    linePre=$(sed -n "/${uuidel}/=" ${REG_PATH})
    sed -i "${linePre}d" ${REG_PATH}
    numl1=2
    let resta=$lineP-$numl1
    for ((i=0; i<5; i++)); do
        sed -i "${resta}d" ${CONFIG_PATH}/config.json
    done
    systemctl restart ${KEY} >/dev/null 2>&1
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\e[92m           UUID REMOVIDO COM SUCESSO"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    fun_xraymanager
}

# Função para mostrar usuários registrados
mosusr_kk() {
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[44;1;37m            USUÁRIOS REGISTRADOS | UUID XRAY             \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    VPSsec=$(date +%s)
    local HOST="${REG_PATH}"
    local RETURN="$(cat $HOST | cut -d'|' -f2)"
    local IDEUUID="$(cat $HOST | cut -d'|' -f1)"
    if [[ -z $RETURN ]]; then
        echo -e "----- NENHUM USUÁRIO REGISTRADO -----"
        echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
        fun_xraymanager
    else
        i=1
        echo -e "\e[97m                 UUID                | USUÁRIO | EXPIRAÇÃO \e[93m"
        echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        while read hostreturn; do
            DateExp="$(cat ${REG_PATH} | grep -w "$hostreturn" | cut -d'|' -f3)"
            if [[ ! -z $DateExp ]]; then
                DataSec=$(date +%s --date="$DateExp")
                [[ "$VPSsec" -gt "$DataSec" ]] && EXPTIME="\e[91m[EXPIRADO]\e[97m" || EXPTIME="\e[92m[$(($(($DataSec - $VPSsec)) / 86400))]\e[97m Dias"
            else
                EXPTIME="\e[91m[ S/R ]"
            fi
            usris="$(cat ${REG_PATH} | grep -w "$hostreturn" | cut -d'|' -f2)"
            local contador_secuencial+="\e[93m$hostreturn \e[97m|\e[93m$usris\e[97m|\e[93m $EXPTIME \n"
            if [[ $i -gt 30 ]]; then
                echo -e "$contador_secuencial"
                unset contador_secuencial
                unset i
            fi
            let i++
        done <<<"$IDEUUID"
        [[ ! -z $contador_secuencial ]] && {
            linesss=$(cat ${REG_PATH} | wc -l)
            echo -e "$contador_secuencial \n Número de Registrados: $linesss"
        }
    fi
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    fun_xraymanager
}

# Função para limitar consumo por porta
lim_port() {
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[44;1;37m            LIMITAR MB POR PORTA | UUID XRAY             \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    estarts() {
        VPSsec=$(date +%s)
        local HOST="${BACKUP_PATH}/lisportt.log"
        if [[ ! -f $HOST ]]; then
            echo -e "----- NENHUMA PORTA REGISTRADA -----"
            echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
            echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
            fun_xraymanager
        fi
        local RETURN="$(cat $HOST | cut -d'|' -f2)"
        local IDEUUID="$(cat $HOST | cut -d'|' -f1)"
        i=1
        while read hostreturn; do
            iptables -n -v -L > ${BACKUP_PATH}/data1.log
            statsss=$(cat ${BACKUP_PATH}/data1.log | grep -w "tcp spt:$hostreturn quota:" | cut -d' ' -f3,4,5)
            gblim=$(cat ${BACKUP_PATH}/lisportt.log | grep -w "$hostreturn" | cut -d'|' -f2)
            local contador_secuencial+="         \e[97mPORTA: \e[93m$hostreturn \e[97m|\e[93m$statsss \e[97m|\e[93m $gblim GB  \n"
            if [[ $i -gt 30 ]]; then
                echo -e "$contador_secuencial"
                unset contador_secuencial
                unset i
            fi
            let i++
        done <<<"$IDEUUID"
        [[ ! -z $contador_secuencial ]] && {
            linesss=$(cat ${BACKUP_PATH}/lisportt.log | wc -l)
            echo -e "$contador_secuencial \n Portas Limitadas: $linesss"
        }
        echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
        fun_xraymanager
    }
    liport() {
        while true; do
            echo -ne "\e[91m >> DIGITE PORTA A LIMITAR: \033[1;92m" && read portbg
            [[ -z "$portbg" ]] && err_fun 17 && continue
            [[ "$portbg" != +([0-9]) ]] && err_fun 16 && continue
            [[ "$portbg" -gt 1000 ]] && err_fun 16 && continue
            break
        done
        while true; do
            echo -ne "\e[91m >> DIGITE QUANTIDADE DE GB: \033[1;92m" && read capgb
            [[ -z "$capgb" ]] && err_fun 17 && continue
            [[ "$capgb" != +([0-9]) ]] && err_fun 15 && continue
            [[ "$capgb" -gt 1000 ]] && err_fun 15 && continue
            break
        done
        uml1=1073741824
        gbuser="$capgb"
        let multiplicacion=$uml1*$gbuser
        sudo iptables -I OUTPUT -p tcp --sport $portbg -j DROP
        sudo iptables -I OUTPUT -p tcp --sport $portbg -m quota --quota $multiplicacion -j ACCEPT
        iptables-save > /etc/iptables/rules.v4
        echo -e " Porta Selecionada: $portbg | Quantidade de GB: $gbuser"
        echo " $portbg | $gbuser | $multiplicacion " >> ${BACKUP_PATH}/lisportt.log
        echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
        fun_xraymanager
    }
    resdata() {
        VPSsec=$(date +%s)
        local HOST="${BACKUP_PATH}/lisportt.log"
        if [[ ! -f $HOST ]]; then
            echo -e "----- NENHUMA PORTA REGISTRADA -----"
            echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
            echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
            fun_xraymanager
        fi
        local RETURN="$(cat $HOST | cut -d'|' -f2)"
        local IDEUUID="$(cat $HOST | cut -d'|' -f1)"
        i=1
        while read hostreturn; do
            iptables -n -v -L > ${BACKUP_PATH}/data1.log
            statsss=$(cat ${BACKUP_PATH}/data1.log | grep -w "tcp spt:$hostreturn quota:" | cut -d' ' -f3,4,5)
            gblim=$(cat ${BACKUP_PATH}/lisportt.log | grep -w "$hostreturn" | cut -d'|' -f2)
            local contador_secuencial+="         \e[97mPORTA: \e[93m$hostreturn \e[97m|\e[93m$statsss \e[97m|\e[93m $gblim GB  \n"
            if [[ $i -gt 30 ]]; then
                echo -e "$contador_secuencial"
                unset contador_secuencial
                unset i
            fi
            let i++
        done <<<"$IDEUUID"
        [[ ! -z $contador_secuencial ]] && {
            linesss=$(cat ${BACKUP_PATH}/lisportt.log | wc -l)
            echo -e "$contador_secuencial \n Portas Limitadas: $linesss"
        }
        echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        while true; do
            echo -ne "\e[91m >> DIGITE PORTA A LIMPAR: \033[1;92m" && read portbg
            [[ -z "$portbg" ]] && err_fun 17 && continue
            [[ "$portbg" != +([0-9]) ]] && err_fun 16 && continue
            [[ "$portbg" -gt 1000 ]] && err_fun 16 && continue
            break
        done
        invaliduuid() {
            echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
            echo -e "\e[91m                PORTA INVÁLIDA \n"
            echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
            echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
            fun_xraymanager
        }
        [[ $(sed -n "/${portbg}/=" ${BACKUP_PATH}/lisportt.log | head -1) ]] || invaliduuid
        gblim=$(cat ${BACKUP_PATH}/lisportt.log | grep -w "$portbg" | cut -d'|' -f3)
        sudo iptables -D OUTPUT -p tcp --sport $portbg -j DROP
        sudo iptables -D OUTPUT -p tcp --sport $portbg -m quota --quota $gblim -j ACCEPT
        iptables-save > /etc/iptables/rules.v4
        lineP=$(sed -n "/${portbg}/=" ${BACKUP_PATH}/lisportt.log)
        sed -i "${lineP}d" ${BACKUP_PATH}/lisportt.log
        echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
        fun_xraymanager
    }
    echo -e "\033[1;37m\033[1;33m[1] > LIMITAR DADOS POR PORTA\033[1;31m"
    echo -e "\033[1;37m\033[1;33m[2] > RESTAURAR DADOS DA PORTA\033[1;31m"
    echo -e "\033[1;37m\033[1;33m[3] > VER DADOS CONSUMIDOS\033[1;31m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;32m [0] > \e[97m\033[1;41m VOLTAR \033[1;37m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    selection=$(selection_fun 3)
    case ${selection} in
        1) liport ;;
        2) resdata ;;
        3) estarts ;;
        0) fun_xraymanager ;;
    esac
}

# Função para ativar/desativar limpador de expirados
limpiador_activador() {
    unset PIDGEN
    PIDGEN=$(ps aux | grep -v grep | grep "limxray")
    if [[ ! $PIDGEN ]]; then
        screen -dmS limxray watch -n 21600 limxray
    else
        screen -S limxray -p 0 -X quit
    fi
    unset PID_GEN
    PID_GEN=$(ps x | grep -v grep | grep "limxray")
    [[ ! $PID_GEN ]] && PID_GEN="\e[91m [ DESATIVADO ] " || PID_GEN="\e[92m [ ATIVADO ] "
    statgen="$(echo $PID_GEN)"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[44;1;37m            REMOVER EXPIRADOS | UUID XRAY             \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "                    $statgen "
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    fun_xraymanager
}

# Função para mostrar conexões ativas
conexao() {
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[44;1;37m            CONEXÕES ATIVAS             \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    netstat -tunlp | grep ${KEY}
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    fun_xraymanager
}

# Menu principal
fun_xraymanager() {
    check_dependencies
    while true; do
        clear
        PID_GEN=$(ps x | grep -v grep | grep "limxray")
        [[ ! $PID_GEN ]] && PID_GEN="\e[91m [ DESATIVADO ] " || PID_GEN="\e[92m [ ATIVADO ] "
        statgen="$(echo $PID_GEN)"
        echo -e "\033[1;36m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\033[0m"
        echo -e "\033[1;36m┃\E[46;1;97m            GERENCIADOR XRAY            \E[0m\033[1;36m┃"
        echo -e "\033[1;36m┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫\033[0m"
        xxray1=$(if netstat -tunlp | grep ${KEY} >/dev/null 2>&1; then echo -e "\e[92m ATIVADO"; else echo -e "\e[91m DESATIVADO"; fi)
        echo -e "\033[1;36m┃\033[1;32mSERVIÇO: \033[1;33mXRAY \033[1;32m$xxray1 \033[1;37m               \033[1;36m┃"
        xxray=$(if netstat -tunlp | grep ${KEY} >/dev/null 2>&1; then echo -e "\033[1;32m◉ "; else echo -e "\033[1;31m○ "; fi)
        echo -e "\033[1;36m┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫\033[0m"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m01\033[1;31m] \033[1;37m• \033[1;33mINSTALAR XRAY $xxray                 \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m02\033[1;31m] \033[1;37m• \033[1;33mALTERAR PROTOCOLO                 \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m03\033[1;31m] \033[1;37m• \033[1;33mATIVAR TLS                        \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m04\033[1;31m] \033[1;37m• \033[1;33mEDITAR PORTA XRAY                 \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m05\033[1;31m] \033[1;37m• \033[1;33mADICIONAR USUÁRIO UUID            \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m06\033[1;31m] \033[1;37m• \033[1;33mREMOVER USUÁRIO UUID              \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m07\033[1;31m] \033[1;37m• \033[1;33mMOSTRAR USUÁRIOS REGISTRADOS      \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m08\033[1;31m] \033[1;37m• \033[1;33mINFORMAÇÕES DA CONTA              \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m09\033[1;31m] \033[1;37m• \033[1;33mESTATÍSTICAS DE CONSUMO           \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m10\033[1;31m] \033[1;37m• \033[1;33mLIMITADOR POR CONSUMO             \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m11\033[1;31m] \033[1;37m• \033[1;33mREMOVER EXPIRADOS$statgen  \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m12\033[1;31m] \033[1;37m• \033[1;33mDESINSTALAR XRAY                  \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m13\033[1;31m] \033[1;37m• \033[1;33mCONEXÕES ATIVAS                   \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m14\033[1;31m] \033[1;37m• \033[1;33mVOLTAR \033[1;32m<\033[1;33m<\033[1;31m<                        \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m00\033[1;31m] \033[1;37m• \033[1;33mSAIR \033[1;32m<\033[1;33m<\033[1;31m<                          \033[1;36m┃"
        echo -e "\033[1;36m┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\033[0m"
        tput civis
        echo -ne "\033[1;36m┗➤\033[1;32m ESCOLHA UMA OPÇÃO \033[1;32m?\033[1;37m: "
        read x
        tput cnorm
        clear
        case $x in
            1 | 01) intallxray ;;
            2 | 02) protocolxray ;;
            3 | 03) tls ;;
            4 | 04) portx ;;
            5 | 05) addusr ;;
            6 | 06) delusr ;;
            7 | 07) mosusr_kk ;;
            8 | 08) infocuenta ;;
            9 | 09) stats ;;
            10) lim_port ;;
            11) limpiador_activador ;;
            12) unistallx ;;
            13) conexao ;;
            14) break ;;
            0 | 00)
                echo -e "\033[1;31mSaindo...\033[0m"
                sleep 1
                clear
                exit
                ;;
            *)
                echo -e "\033[1;31mOpção inválida!\033[0m"
                sleep 2
                ;;
        esac
    done
}

# Executar o menu
fun_xraymanager
