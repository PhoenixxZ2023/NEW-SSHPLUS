#!/bin/bash
#====================================================
#	@TURBONET2023
#	Adaptado para XRay por Grok
#   MODIFICAÇÕES: Limite de nome de usuário (10), menu XTLS.
#====================================================

# Cores
cor1='\033[41;1;37m'
cor2='\033[44;1;37m'
scor='\033[0m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
SCOLOR='\033[0m'

# Mensagens de erro
msg01='\033[1;37m\033[1;33mUSUÁRIO NULO\033[1;31m'
msg02='\033[1;37m\033[1;33mNOME MUITO CURTO (MÍN: 2 CARACTERES)\033[1;31m'
msg03='\033[1;37m\033[1;33mNOME MUITO LONGO (MÁX: 10 CARACTERES)\033[1;31m'
msg04='\033[1;37m\033[1;33mSENHA NULA\033[1;31m'
msg05='\033[1;37m\033[1;33mSENHA MUITO CURTA\033[1;31m'
msg06='\033[1;37m\033[1;33mSENHA MUITO LONGA\033[1;31m'
msg07='\033[1;37m\033[1;33mDURAÇÃO NULA\033[1;31m'
msg08='\033[1;37m\033[1;33mDURAÇÃO INVÁLIDA, USE NÚMEROS\033[1;31m'
msg09='\033[1;37m\033[1;33mDURAÇÃO MÁXIMA DE UM ANO\033[1;31m'
msg11='\033[1;37m\033[1;33mLIMITE NULO\033[1;31m'
msg12='\033[1;37m\033[1;33mLIMITE INVÁLIDO, USE NÚMEROS\033[1;31m'
msg13='\033[1;37m\033[1;33mLIMITE MÁXIMO DE 999\033[1;31m'
msg14='\033[1;37m\033[1;33mUSUÁRIO JÁ EXISTE\033[1;31m'
msg15='\033[1;37m\033[1;33m(APENAS NÚMEROS) GB = MÍN: 1GB MÁX: 1000GB\033[1;31m'
msg16='\033[1;37m\033[1;33m(APENAS NÚMEROS)\033[1;31m'
msg17='\033[1;37m\033[1;33m(SEM INFORMAÇÃO - PARA CANCELAR PRESSIONE CTRL + C)\033[1;31m'

err_fun() {
    case $1 in
        1) msg -verm "$(fun_trans "USUÁRIO NULO")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1 ;;
        2) msg -verm "$(fun_trans "NOME MUITO CURTO (MÍN: 2 CARACTERES)")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1 ;;
        3) msg -verm "$(fun_trans "NOME MUITO LONGO (MÁX: 10 CARACTERES)")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1 ;;
        4) msg -verm "$(fun_trans "SENHA NULA")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1 ;;
        5) msg -verm "$(fun_trans "SENHA MUITO CURTA")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1 ;;
        6) msg -verm "$(fun_trans "SENHA MUITO LONGA")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1 ;;
        7) msg -verm "$(fun_trans "DURAÇÃO NULA")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1 ;;
        8) msg -verm "$(fun_trans "DURAÇÃO INVÁLIDA, UTILIZE NÚMEROS")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1 ;;
        9) msg -verm "$(fun_trans "DURAÇÃO MÁXIMA DE UM ANO")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1 ;;
        11) msg -verm "$(fun_trans "LIMITE NULO")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1 ;;
        12) msg -verm "$(fun_trans "LIMITE INVÁLIDO, USE NÚMEROS")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1 ;;
        13) msg -verm "$(fun_trans "LIMITE MÁXIMO DE 999")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1 ;;
        14) msg -verm "$(fun_trans "USUÁRIO JÁ EXISTE")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1 ;;
        15) msg -verm "$(fun_trans "(APENAS NÚMEROS) GB = MÍN: 1GB MÁX: 1000GB")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1 ;;
        16) msg -verm "$(fun_trans "(APENAS NÚMEROS)")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1 ;;
        17) msg -verm "$(fun_trans "(SEM INFORMAÇÃO - PARA CANCELAR PRESSIONE CTRL + C)")"; sleep 4s; tput cuu1; tput dl1; tput cuu1; tput dl1 ;;
    esac
}

msg() {
    local COLOR=$1
    shift
    echo -e "${COLOR}${@}${SCOLOR}"
}

fun_trans() {
    echo "$@"
}

intall_xray() {
    source <(curl -sL https://raw.githubusercontent.com/PhoenixxZ2023/NEW-SSHPLUS/main/Modulos/xray)
    echo -e "\033[1;37m\033[1;33mINSTALADO COM SUCESSO ✅!\033[1;31m"
    USRdatabase="/etc/SSHPlus/RegXray"
    [[ ! -e ${USRdatabase} ]] && touch ${USRdatabase}
    sort ${USRdatabase} | uniq >${USRdatabase}tmp
    mv -f ${USRdatabase}tmp ${USRdatabase}
    systemctl restart xray >/dev/null 2>&1
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    fun_xraymanager
}

protocol_xray() {
    echo -e "\E[44;1;37m             EDITAR PROTOCOLO XRAY              \E[0m"
    echo -e "\033[1;37m• \033[1;33mESCOLHA A OPÇÃO 3 E COLOQUE SEU DOMÍNIO OU HOST. EX: turbonetvpn.com\033[1;31m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    xray stream
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    fun_xraymanager
}

tls() {
    clear
    echo -e "\E[44;1;37m             ATIVAR OU DESATIVAR TLS              \E[0m"
    xray tls
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    fun_xraymanager
}

ativar_vless_xtls() {
    clear
    echo -e "\E[44;1;37m         ATIVAR/CONFIGURAR VLESS + XTLS-Vision         \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    
    if [ ! -f "/etc/xray/xray.crt" ] || [ ! -f "/etc/xray/xray.key" ]; then
        echo -e "\n${YELLOW}AVISO: Certificado TLS não encontrado!${SCOLOR}"
        echo -e "O XTLS precisa de um certificado TLS para funcionar."
        echo -e "Por favor, execute primeiro a opção ${GREEN}'ATIVAR TLS'${SCOLOR} no menu anterior."
        echo -e "Ela irá gerar o certificado para o seu domínio."
        echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        echo -e "\033[1;37m• \033[1;33mEnter Para Voltar ao Menu\033[1;31m" && read enter
        fun_xraymanager
        return
    fi
    
    echo -e "\n${GREEN}Certificado TLS encontrado!${SCOLOR}"
    echo -e "Você será direcionado para o menu de configuração de 'stream'."
    echo -e "Para ativar o XTLS, siga estes passos no menu que aparecerá:"
    echo -e " 1. Em 'Security', escolha a opção ${YELLOW}xtls${SCOLOR}."
    echo -e " 2. Em 'Flow', escolha a opção ${YELLOW}xtls-rprx-vision${SCOLOR}."
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    read -p "Pressione Enter para continuar..."

    xray stream
    
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "${GREEN}Configuração de stream finalizada.${SCOLOR}"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    fun_xraymanager
}

port_xray() {
    echo -e "\E[44;1;37m              EDITAR PORTA XRAY               \E[0m"
    xray port
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    fun_xraymanager
}

stats() {
    echo -e "\E[44;1;37m           ESTATÍSTICAS DE CONSUMO            \E[0m"
    xray stats
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    fun_xraymanager
}

uninstall_xray() {
    source <(curl -sL https://raw.githubusercontent.com/PhoenixxZ2023/NEW-SSHPLUS/main/Modulos/go1.sh) --remove >/dev/null 2>&1
    rm -rf /etc/SSHPlus/RegXray >/dev/null 2>&1
    echo -e "\n\033[1;32mXRAY REMOVIDO COM SUCESSO!\033[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    fun_xraymanager
}

infocuenta() {
    echo -e "\E[44;1;37m            INFORMAÇÕES DA CONTA              \E[0m"
    xray info
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    fun_xraymanager
}

addusr() {
    clear
    echo -e "\E[44;1;37m         ADICIONAR USUÁRIO | UUID XRAY          \E[0m"
    ## DIAS
    valid=$(date '+%C%y-%m-%d' -d " +31 days")
    ## CORREIO
    USERMAIL=$(cat /dev/urandom | tr -dc '[:alnum:]' | head -c 10)
    ## ADDUSERXRAY
    UUID=$(uuidgen)
    sed -i '/"clients": \[/a\            {"id": "'$UUID'", "email": "'$USERMAIL'@gmail.com", "alterId": 0},' /etc/xray/config.json
    echo ""
    while true; do
        echo -ne "\e[91m >> DIGITE UM USUÁRIO: \033[1;92m"
        read -p ": " nick
        nick="$(echo $nick | sed -e 's/[^a-z0-9 -]//ig')"
        if [[ -z $nick ]]; then
            err_fun 17 && continue
        elif [[ "${#nick}" -lt "2" ]]; then
            err_fun 2 && continue
        elif [[ "${#nick}" -gt "10" ]]; then
            err_fun 3 && continue
        fi
        break
    done
    echo -e "\e[91m >> ADICIONAR UUID: \e[92m$UUID "
    while true; do
        echo -ne "\e[91m >> DURAÇÃO DO UUID (DIAS):\033[1;92m " && read diasuser
        if [[ -z "$diasuser" ]]; then
            err_fun 7 && continue
        elif [[ "$diasuser" != +([0-9]) ]]; then
            err_fun 8 && continue
        elif [[ "$diasuser" -gt "360" ]]; then
            err_fun 9 && continue
        fi
        break
    done
    valid=$(date '+%C%y-%m-%d' -d " +$diasuser days")
    datexp=$(date "+%F" -d " + $diasuser days")
    echo -e "\e[91m >> EXPIRA EM: \e[92m$datexp "
    ## REGISTRO
    echo "  $UUID | $nick | $valid " >>/etc/SSHPlus/RegXray
    Fecha=$(date +%d-%m-%y-%R)
    cp /etc/SSHPlus/RegXray /etc/SSHPlus/xray/RegXray-"$Fecha"
    systemctl restart xray >/dev/null 2>&1
    echo ""
    xray info >/etc/SSHPlus/xray/confuuid.log
    lineP=$(sed -n '/'$UUID'/=' /etc/SSHPlus/xray/confuuid.log)
    numl1=4
    let suma=$lineP+$numl1
    sed -n ${suma}p /etc/SSHPlus/xray/confuuid.log
    echo ""
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\e[92m             UUID ADICIONADO COM SUCESSO "
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    fun_xraymanager
}

delusr() {
    clear
    invaliduuid() {
        echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        echo -e "\e[91m                   UUID INVÁLIDO \n"
        echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
        fun_xraymanager
    }
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[44;1;37m         REMOVER USUÁRIO | UUID XRAY          \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\e[97m                    USUÁRIOS REGISTRADOS"
    echo -e "\e[33m$(cat /etc/SSHPlus/RegXray | cut -d '|' -f2,1)"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -ne "\e[91m >> DIGITE UUID PARA REMOVER:\n \033[1;92m " && read uuidel
    [[ $(sed -n '/'$uuidel'/=' /etc/xray/config.json | head -1) ]] || invaliduuid
    lineP=$(sed -n '/'$uuidel'/=' /etc/xray/config.json)
    linePre=$(sed -n '/'$uuidel'/=' /etc/SSHPlus/RegXray)
    sed -i "${linePre}d" /etc/SSHPlus/RegXray
    sed -i "${lineP}d" /etc/xray/config.json
    systemctl restart xray >/dev/null 2>&1
    echo ""
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\e[92m             UUID REMOVIDO COM SUCESSO "
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    fun_xraymanager
}

mosusr_kk() {
    clear
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[44;1;37m       USUÁRIOS REGISTRADOS | UUID XRAY         \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    VPSsec=$(date +%s)
    local HOST="/etc/SSHPlus/RegXray"
    local RETURN="$(cat $HOST | cut -d'|' -f2)"
    local IDEUUID="$(cat $HOST | cut -d'|' -f1)"
    if [[ -z $RETURN ]]; then
        echo -e "----- NENHUM USUÁRIO REGISTRADO -----"
        echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
        fun_xraymanager
    else
        i=1
        echo -e "\e[97m                 UUID                       | USUÁRIO | EXPIRAÇÃO \e[93m"
        echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        while read hostreturn; do
            DateExp="$(cat /etc/SSHPlus/RegXray | grep -w "$hostreturn" | cut -d'|' -f3)"
            if [[ ! -z $DateExp ]]; then
                DataSec=$(date +%s --date="$DateExp")
                [[ "$VPSsec" -gt "$DataSec" ]] && EXPTIME="\e[91m[EXPIRADO]\e[97m" || EXPTIME="\e[92m[$(($(($DataSec - $VPSsec)) / 86400))]\e[97m Dias"
            else
                EXPTIME="\e[91m[ S/R ]"
            fi
            usris="$(cat /etc/SSHPlus/RegXray | grep -w "$hostreturn" | cut -d'|' -f2)"
            local contador_secuencial+="\e[93m$hostreturn \e[97m|\e[93m$usris\e[97m|\e[93m $EXPTIME \n"
            if [[ $i -gt 30 ]]; then
                echo -e "$contador_secuencial"
                unset contador_secuencial
                unset i
            fi
            let i++
        done <<<"$IDEUUID"
        [[ ! -z $contador_secuencial ]] && {
            linesss=$(cat /etc/SSHPlus/RegXray | wc -l)
            echo -e "$contador_secuencial \n Número de Registrados: $linesss"
        }
    fi
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    fun_xraymanager
}

lim_port() {
    clear
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[44;1;37m        LIMITAR MB POR PORTA | UUID XRAY         \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    estarts() {
        VPSsec=$(date +%s)
        local HOST="/etc/SSHPlus/xray/lisportt.log"
        local RETURN="$(cat $HOST | cut -d'|' -f2)"
        local IDEUUID="$(cat $HOST | cut -d'|' -f1)"
        if [[ -z $RETURN ]]; then
            echo -e "----- NENHUMA PORTA REGISTRADA -----"
            echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
            fun_xraymanager
        else
            i=1
            while read hostreturn; do
                iptables -n -v -L >/etc/SSHPlus/xray/data1.log
                statsss=$(cat /etc/SSHPlus/xray/data1.log | grep -w "tcp spt:$hostreturn quota:" | cut -d' ' -f3,4,5)
                gblim=$(cat /etc/SSHPlus/xray/lisportt.log | grep -w "$hostreturn" | cut -d'|' -f2)
                local contador_secuencial+="             \e[97mPORTA: \e[93m$hostreturn \e[97m|\e[93m$statsss \e[97m|\e[93m $gblim GB   \n"
                if [[ $i -gt 30 ]]; then
                    echo -e "$contador_secuencial"
                    unset contador_secuencial
                    unset i
                fi
                let i++
            done <<<"$IDEUUID"
            [[ ! -z $contador_secuencial ]] && {
                linesss=$(cat /etc/SSHPlus/xray/lisportt.log | wc -l)
                echo -e "$contador_secuencial \n Portas Limitadas: $linesss"
            }
        fi
        echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
        fun_xraymanager
    }
    liport() {
        while true; do
            echo -ne "\e[91m >> DIGITE PORTA A LIMITAR:\033[1;92m " && read portbg
            if [[ -z "$portbg" ]]; then
                err_fun 17 && continue
            elif [[ "$portbg" != +([0-9]) ]]; then
                err_fun 16 && continue
            elif [[ "$portbg" -gt "1000" ]]; then
                err_fun 16 && continue
            fi
            break
        done
        while true; do
            echo -ne "\e[91m >> DIGITE QUANTIDADE DE GB:\033[1;92m " && read capgb
            if [[ -z "$capgb" ]]; then
                err_fun 17 && continue
            elif [[ "$capgb" != +([0-9]) ]]; then
                err_fun 15 && continue
            elif [[ "$capgb" -gt "1000" ]]; then
                err_fun 15 && continue
            fi
            break
        done
        uml1=1073741824
        gbuser="$capgb"
        let multiplicacion=$uml1*$gbuser
        sudo iptables -I OUTPUT -p tcp --sport $portbg -j DROP
        sudo iptables -I OUTPUT -p tcp --sport $portbg -m quota --quota $multiplicacion -j ACCEPT
        iptables-save >/etc/iptables/rules.v4
        echo ""
        echo -e " Porta Selecionada: $portbg | Quantidade de GB: $gbuser"
        echo ""
        echo " $portbg | $gbuser | $multiplicacion " >>/etc/SSHPlus/xray/lisportt.log
        echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
        fun_xraymanager
    }
    resdata() {
        VPSsec=$(date +%s)
        local HOST="/etc/SSHPlus/xray/lisportt.log"
        local RETURN="$(cat $HOST | cut -d'|' -f2)"
        local IDEUUID="$(cat $HOST | cut -d'|' -f1)"
        if [[ -z $RETURN ]]; then
            echo -e "----- NENHUMA PORTA REGISTRADA -----"
            return 0
        else
            i=1
            while read hostreturn; do
                iptables -n -v -L >/etc/SSHPlus/xray/data1.log
                statsss=$(cat /etc/SSHPlus/xray/data1.log | grep -w "tcp spt:$hostreturn quota:" | cut -d' ' -f3,4,5)
                gblim=$(cat /etc/SSHPlus/xray/lisportt.log | grep -w "$hostreturn" | cut -d'|' -f2)
                local contador_secuencial+="             \e[97mPORTA: \e[93m$hostreturn \e[97m|\e[93m$statsss \e[97m|\e[93m $gblim GB   \n"
                if [[ $i -gt 30 ]]; then
                    echo -e "$contador_secuencial"
                    unset contador_secuencial
                    unset i
                fi
                let i++
            done <<<"$IDEUUID"
            [[ ! -z $contador_secuencial ]] && {
                linesss=$(cat /etc/SSHPlus/xray/lisportt.log | wc -l)
                echo -e "$contador_secuencial \n Portas Limitadas: $linesss"
            }
        fi
        echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        while true; do
            echo -ne "\e[91m >> DIGITE PORTA A LIMPAR:\033[1;92m " && read portbg
            if [[ -z "$portbg" ]]; then
                err_fun 17 && continue
            elif [[ "$portbg" != +([0-9]) ]]; then
                err_fun 16 && continue
            elif [[ "$portbg" -gt "1000" ]]; then
                err_fun 16 && continue
            fi
            break
        done
        invaliduuid() {
            echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
            echo -e "\e[91m               PORTA INVÁLIDA \n"
            echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
            echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
            fun_xraymanager
        }
        [[ $(sed -n '/'$portbg'/=' /etc/SSHPlus/xray/lisportt.log | head -1) ]] || invaliduuid
        gblim=$(cat /etc/SSHPlus/xray/lisportt.log | grep -w "$portbg" | cut -d'|' -f3)
        sudo iptables -D OUTPUT -p tcp --sport $portbg -j DROP
        sudo iptables -D OUTPUT -p tcp --sport $portbg -m quota --quota $gblim -j ACCEPT
        iptables-save >/etc/iptables/rules.v4
        lineP=$(sed -n '/'$portbg'/=' /etc/SSHPlus/xray/lisportt.log)
        sed -i "${lineP}d" /etc/SSHPlus/xray/lisportt.log
        echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
        fun_xraymanager
    }
    echo -e "\033[1;37m\033[1;33m[1] > LIMITAR DADOS POR PORTA\033[1;31m"
    echo -e "\033[1;37m\033[1;33m[2] > RESTAURAR DADOS DA PORTA\033[1;31m"
    echo -e "\033[1;37m\033[1;33m[3] > VER DADOS CONSUMIDOS\033[1;31m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;32m [0] > \e[97m\033[1;41m VOLTAR \033[1;37m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    selection=$(selection_fun 3)
    case ${selection} in
    1) liport ;;
    2) resdata ;;
    3) estarts ;;
    0) fun_xraymanager ;;
    esac
}

limpiador_activador() {
    unset PIDGEN
    PIDGEN=$(ps aux | grep -v grep | grep "limxray")
    if [[ ! $PIDGEN ]]; then
        screen -dmS limxray watch -n 21600 limxray
    else
        screen -S limxray -p 0 -X quit
    fi
    unset PID_GEN
    PID_GEN=$(ps x | grep -v grep | grep "limxray")
    [[ ! $PID_GEN ]] && PID_GEN="\e[91m [ DESATIVADO ] " || PID_GEN="\e[92m [ ATIVADO ] "
    statgen="$(echo $PID_GEN)"
    clear
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[44;1;37m         REMOVER EXPIRADOS | UUID XRAY          \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo ""
    echo -e "                 $statgen "
    echo ""
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    fun_xraymanager
}

selection_fun() {
    local selection="null"
    local range
    for ((i=0; i<=$1; i++)); do range[$i]="$i "; done
    while [[ ! $(echo ${range[*]}|grep -w "$selection") ]]; do
        echo -ne "\033[1;37m ► Selecione uma Opção: " >&2
        read selection
        tput cuu1 >&2 && tput dl1 >&2
    done
    echo $selection
}

fun_xraymanager() {
    PID_GEN=$(ps x|grep -v grep|grep "limxray")
    [[ ! $PID_GEN ]] && PID_GEN="\e[91m○ " || PID_GEN="\e[92m◉ "
    statgen="$(echo $PID_GEN)"
    
    while true; do
        clear
        echo -e "\033[1;36m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\033[0m"
        echo -e "\033[1;36m┃\E[46;1;97m           GERENCIADOR XRAY              \E[0m\033[1;36m┃"
        echo -e "\033[1;36m┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫\033[0m"
        xray_status=$(if netstat -tunlp | grep xray >/dev/null 2>&1; then echo -e "\e[92m ATIVADO"; else echo -e "\e[91m DESATIVADO"; fi)
        echo -e "\033[1;36m┃\033[1;32mSERVIÇO: \033[1;33mXRAY \033[1;32m$xray_status\033[1;37m                       \033[0m"
        xray_icon=$(if netstat -tunlp | grep xray >/dev/null 2>&1; then echo -e "\033[1;32m◉ "; else echo -e "\033[1;31m○ "; fi)
        echo -e "\033[1;36m┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\033[0m"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;36m01\033[1;31m] \033[1;37m• \033[1;37mINSTALAR/REPARAR XRAY                 \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;36m02\033[1;31m] \033[1;37m• \033[1;37mALTERAR PROTOCOLO (genérico)          \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;36m03\033[1;31m] \033[1;37m• \033[1;37mATIVAR TLS                            \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;36m04\033[1;31m] \033[1;37m• \033[1;33mATIVAR/CONFIGURAR VLESS+XTLS          \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;36m05\033[1;31m] \033[1;37m• \033[1;37mALTERAR PORTA XRAY                    \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;36m06\033[1;31m] \033[1;37m• \033[1;37mADICIONAR USUARIO UUID                \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;36m07\033[1;31m] \033[1;37m• \033[1;37mELIMINAR USUARIO UUID                 \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;36m08\033[1;31m] \033[1;37m• \033[1;37mMOSTRAR USUARIOS REGISTRADOS          \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;36m09\033[1;31m] \033[1;37m• \033[1;37mINFORMAÇÃO DA CONTA                   \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;36m10\033[1;31m] \033[1;37m• \033[1;37mESTATÍSTICAS DE CONSUMO               \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;36m11\033[1;31m] \033[1;37m• \033[1;37mLIMITADOR POR CONSUMO                 \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;36m12\033[1;31m] \033[1;37m• \033[1;37mLIMPADOR DE EXPIRADOS $statgen              \033[0;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;36m13\033[1;31m] \033[1;37m• \033[1;37mDESINSTALAR XRAY                      \033[0;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;36m14\033[1;31m] \033[1;37m• \033[1;37mVOLTAR <<<                            \033[0;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;36m00\033[1;31m] \033[1;37m• \033[1;37mSAIR <<<                              \033[0;36m┃"
        echo -e "\033[1;36m┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\033[0m"
        tput civis
        echo -ne "\033[1;36m┗➤\033[1;32m ESCOLHA UMA OPÇÃO \033[1;32m?\033[1;37m: "
        read x
        tput cnorm
        clear
        case $x in
        1 | 01) intall_xray ;;
        2 | 02) protocol_xray ;;
        3 | 03) tls ;;
        4 | 04) ativar_vless_xtls ;;
        5 | 05) port_xray ;;
        6 | 06) addusr ;;
        7 | 07) delusr ;;
        8 | 08) mosusr_kk ;;
        9 | 09) infocuenta ;;
        10) stats ;;
        11) lim_port ;;
        12) limpiador_activador ;;
        13) uninstall_xray ;;
        14) exit ;; # Ajustado para sair corretamente
        0 | 00) echo -e "\033[1;31mSaindo...\033[0m"; sleep 1; clear; exit ;;
        *) echo -e "\033[1;31mOpção inválida!\033[0m"; sleep 2 ;;
        esac
    done
}

# Inicia o menu principal
fun_xraymanager
