#!/bin/bash
# EDIT: @TURBONET2023
# github: https://github.com/PhoenixxZ2023/NEW-SSHPLUS

# Horário de execução da tarefa cron (0-23, horário de Pequim)
BEIJING_UPDATE_TIME=3

# Caminho inicial do script
BEGIN_PATH=$(pwd)

# Modo de instalação: 0 para nova instalação, 1 para manter configuração existente
INSTALL_WAY=0

# Variáveis de controle: 0 para não, 1 para sim
HELP=0
REMOVE=0
CHINESE=0

# URLs e caminhos
BASE_SOURCE_PATH="https://multi.netlify.app"
UTIL_PATH="/etc/v2ray_util/util.cfg"
UTIL_CFG="$BASE_SOURCE_PATH/v2ray_util/util_core/util.cfg"
BASH_COMPLETION_SHELL="$BASE_SOURCE_PATH/v2ray"
CLEAN_IPTABLES_SHELL="$BASE_SOURCE_PATH/v2ray_util/global_setting/clean_iptables.sh"
GO_SH_URL="https://raw.githubusercontent.com/PhoenixxZ2023/NEW-SSHPLUS/main/Modulos/go.sh"

# Detectar shell para configuração de ambiente
[[ -z $(echo $SHELL | grep zsh) ]] && ENV_FILE=".bashrc" || ENV_FILE=".zshrc"

# Cores para saída
RED="31m"
GREEN="32m"
YELLOW="33m"
BLUE="36m"
FUCHSIA="35m"

colorEcho() {
    COLOR=$1
    echo -e "\033[${COLOR}${@:2}\033[0m"
}

# Processar argumentos da linha de comando
while [[ $# > 0 ]]; do
    key="$1"
    case $key in
        --remove)
            REMOVE=1
            ;;
        -h|--help)
            HELP=1
            ;;
        -k|--keep)
            INSTALL_WAY=1
            colorEcho ${BLUE} "Manter configuração para atualizar\n"
            ;;
        --zh)
            CHINESE=1
            colorEcho ${BLUE} "Instalando versão em chinês..\n"
            ;;
        *)
            # Opção desconhecida
            ;;
    esac
    shift
done

# Função de ajuda
help() {
    echo "bash v2ray.sh [-h|--help] [-k|--keep] [--remove]"
    echo "  -h, --help           Mostra ajuda"
    echo "  -k, --keep           Mantém o config.json para atualização"
    echo "      --remove         Remove V2Ray, Xray e multi-v2ray"
    echo "                       Sem parâmetros: instala nova versão"
    return 0
}

# Função para desinstalar V2Ray/Xray
removeV2Ray() {
    # Remover V2Ray
    bash <(curl -L -s "$GO_SH_URL") --remove >/dev/null 2>&1
    rm -rf /etc/v2ray >/dev/null 2>&1
    rm -rf /var/log/v2ray >/dev/null 2>&1

    # Remover Xray
    bash <(curl -L -s "$GO_SH_URL") --remove -x >/dev/null 2>&1
    rm -rf /etc/xray >/dev/null 2>&1
    rm -rf /var/log/xray >/dev/null 2>&1

    # Limpar regras iptables
    bash <(curl -L -s "$CLEAN_IPTABLES_SHELL") >/dev/null 2>&1

    # Remover v2ray_util
    pip uninstall v2ray_util -y >/dev/null 2>&1
    rm -rf /usr/share/bash-completion/completions/v2ray.bash >/dev/null 2>&1
    rm -rf /usr/share/bash-completion/completions/v2ray >/dev/null 2>&1
    rm -rf /usr/share/bash-completion/completions/xray >/dev/null 2>&1
    rm -rf /etc/bash_completion.d/v2ray.bash >/dev/null 2>&1
    rm -rf /usr/local/bin/v2ray >/dev/null 2>&1
    rm -rf /etc/v2ray_util >/dev/null 2>&1

    # Remover tarefa cron de atualização
    crontab -l | sed '/SHELL=/d;/v2ray/d;/xray/d' > crontab.txt
    crontab crontab.txt >/dev/null 2>&1
    rm -f crontab.txt >/dev/null 2>&1

    # Reiniciar serviço cron
    if [[ ${PACKAGE_MANAGER} == 'dnf' || ${PACKAGE_MANAGER} == 'yum' ]]; then
        systemctl restart crond >/dev/null 2>&1
    else
        systemctl restart cron >/dev/null 2>&1
    fi

    # Remover variáveis de ambiente
    sed -i '/v2ray/d' ~/$ENV_FILE
    sed -i '/xray/d' ~/$ENV_FILE
    source ~/$ENV_FILE

    colorEcho ${GREEN} "Desinstalação concluída com sucesso!"
}

# Função para desativar SELinux
closeSELinux() {
    if [[ -s /etc/selinux/config ]] && grep 'SELINUX=enforcing' /etc/selinux/config; then
        sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
        setenforce 0
    fi
    if command -v getenforce >/dev/null && [[ "$(getenforce)" == "Enforcing" ]]; then
        colorEcho ${YELLOW} "SELinux ainda está ativo. Forçando desativação."
        setenforce 0
        if [[ $? -ne 0 ]]; then
            colorEcho ${RED} "Falha ao desativar SELinux. Isso pode causar problemas de permissão."
        fi
    fi
}

# Função para verificar o sistema
checkSys() {
    # Verificar privilégios de root
    [[ $(id -u) != "0" ]] && { colorEcho ${RED} "Erro: Você deve ser root para executar este script"; exit 1; }

    # Detectar gerenciador de pacotes
    if [[ -n $(command -v apt-get) ]]; then
        PACKAGE_MANAGER='apt-get'
    elif [[ -n $(command -v yum) ]]; then
        PACKAGE_MANAGER='yum'
    elif [[ -n $(command -v dnf) ]]; then
        PACKAGE_MANAGER='dnf'
    else
        colorEcho ${RED} "Erro: Gerenciador de pacotes não suportado (apt-get, yum ou dnf necessário)"
        exit 1
    fi
}

# Função para instalar dependências
installDependencies() {
    colorEcho ${BLUE} "Instalando dependências..."
    if [[ ${PACKAGE_MANAGER} == 'apt-get' ]]; then
        ${PACKAGE_MANAGER} update -y
        ${PACKAGE_MANAGER} install -y curl unzip python3-pip
    elif [[ ${PACKAGE_MANAGER} == 'yum' || ${PACKAGE_MANAGER} == 'dnf' ]]; then
        ${PACKAGE_MANAGER} install -y curl unzip python3-pip
    fi
    if [[ $? -ne 0 ]]; then
        colorEcho ${RED} "Falha ao instalar dependências. Verifique sua conexão ou repositórios."
        exit 1
    fi
}

# Função para instalar v2ray_util
installV2rayUtil() {
    colorEcho ${BLUE} "Instalando v2ray_util..."
    pip install -U v2ray_util >/dev/null 2>&1
    if [[ $? -ne 0 ]]; then
        colorEcho ${RED} "Falha ao instalar v2ray_util. Verifique a instalação do pip."
        exit 1
    fi
    # Verificar se o comando v2ray está disponível
    if ! command -v v2ray >/dev/null 2>&1; then
        colorEcho ${RED} "Erro: v2ray_util instalado, mas comando 'v2ray' não encontrado."
        exit 1
    fi
}

# Função principal
main() {
    [[ $HELP -eq 1 ]] && help && return 0
    [[ $REMOVE -eq 1 ]] && removeV2Ray && return 0

    checkSys
    closeSELinux
    installDependencies

    # Instalar V2Ray
    colorEcho ${BLUE} "Instalando V2Ray..."
    if [[ $INSTALL_WAY -eq 1 ]]; then
        bash <(curl -L -s "$GO_SH_URL") --force
    else
        bash <(curl -L -s "$GO_SH_URL")
    fi
    if [[ $? -ne 0 ]]; then
        colorEcho ${RED} "Falha ao instalar V2Ray. Verifique sua conexão ou o script go.sh."
        exit 1
    fi

    # Instalar v2ray_util
    installV2rayUtil

    # Configurar tarefa cron para atualização
    echo "0 ${BEIJING_UPDATE_TIME} * * * root bash ${BEGIN_PATH}/v2ray.sh -k" >> /etc/crontab
    if [[ ${PACKAGE_MANAGER} == 'dnf' || ${PACKAGE_MANAGER} == 'yum' ]]; then
        systemctl restart crond >/dev/null 2>&1
    else
        systemctl restart cron >/dev/null 2>&1
    fi

    # Configurar bash completion
    curl -L -s "$BASH_COMPLETION_SHELL" > /etc/bash_completion.d/v2ray.bash
    source /etc/bash_completion.d/v2ray.bash

    colorEcho ${GREEN} "V2Ray instalado com sucesso!"
}

main
