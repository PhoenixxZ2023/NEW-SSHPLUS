#!/bin/bash
#====================================================
# @TURBONET2023
# Gerenciador V2Ray: Script para gerenciar servidores V2Ray, incluindo instalação,
# configuração de protocolos, TLS, portas, usuários, limites de dados e expiração.
# Dependências: netstat ou ss, iptables, screen, uuidgen, curl, dig (opcional)
# Requisitos: Executar como root
# Log: Ações são registradas em /etc/SSHPlus/v2ray/v2ray.log
#====================================================

# Verificar privilégios de root
if [[ $EUID -ne 0 ]]; then
    echo "Erro: Este script deve ser executado como root."
    exit 1
fi

# Configuração de cores
cor1='\033[41;1;37m'
cor2='\033[44;1;37m'
scor='\033[0m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
SCOLOR='\033[0m'
# Permitir desativar cores para maior compatibilidade
if [[ -n "$NO_COLOR" ]]; then
    cor1='' cor2='' scor='' GREEN='' YELLOW='' SCOLOR=''
fi

# Mensagens de erro
msg01="${cor1}USUÁRIO NULO${scor}"
msg02="${cor1}NOME MUITO CURTO (MÍN: 2 CARACTERES)${scor}"
msg03="${cor1}NOME MUITO LONGO (MÁX: 5 CARACTERES)${scor}"
msg04="${cor1}SENHA NULA${scor}"
msg05="${cor1}SENHA MUITO CURTA${scor}"
msg06="${cor1}SENHA MUITO LONGA${scor}"
msg07="${cor1}DURAÇÃO NULA${scor}"
msg08="${cor1}DURAÇÃO INVÁLIDA, USE NÚMEROS${scor}"
msg09="${cor1}DURAÇÃO MÁXIMA DE UM ANO${scor}"
msg11="${cor1}LIMITE NULO${scor}"
msg12="${cor1}LIMITE INVÁLIDO, USE NÚMEROS${scor}"
msg13="${cor1}LIMITE MÁXIMO DE 999${scor}"
msg14="${cor1}USUÁRIO JÁ EXISTE${scor}"
msg15="${cor1}(APENAS NÚMEROS) GB = MÍN: 1GB MÁX: 1000GB${scor}"
msg16="${cor1}(APENAS NÚMEROS)${scor}"
msg17="${cor1}(SEM INFORMAÇÃO - PARA CANCELAR PRESSIONE CTRL + C)${scor}"
msg18="${cor1}PROTOCOLO INVÁLIDO${scor}"
msg19="${cor1}DOMÍNIO INVÁLIDO${scor}"
msg20="${cor1}ERRO AO APLICAR CONFIGURAÇÃO${scor}"
msg21="${cor1}DOMÍNIO NÃO APONTA PARA O IP DA VPS${scor}"
msg22="${cor1}CONFIGURAÇÃO INVÁLIDA${scor}"
msg23="${cor1}AVISO: VERIFIQUE SE O DOMÍNIO APONTA PARA O IP DA VPS${scor}"

# Arquivo de log
LOG_FILE="/etc/SSHPlus/v2ray/v2ray.log"
[[ ! -d "/etc/SSHPlus/v2ray" ]] && mkdir -p /etc/SSHPlus/v2ray
touch "$LOG_FILE"

# Função para registrar ações no log
log_action() {
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] $1" >> "$LOG_FILE"
}

# Função para exibir mensagens de erro
err_fun() {
    case $1 in
        1) echo -e "$msg01";;
        2) echo -e "$msg02";;
        3) echo -e "$msg03";;
        4) echo -e "$msg04";;
        5) echo -e "$msg05";;
        6) echo -e "$msg06";;
        7) echo -e "$msg07";;
        8) echo -e "$msg08";;
        9) echo -e "$msg09";;
        11) echo -e "$msg11";;
        12) echo -e "$msg12";;
        13) echo -e "$msg13";;
        14) echo -e "$msg14";;
        15) echo -e "$msg15";;
        16) echo -e "$msg16";;
        17) echo -e "$msg17";;
        18) echo -e "$msg18";;
        19) echo -e "$msg19";;
        20) echo -e "$msg20";;
        21) echo -e "$msg21";;
        22) echo -e "$msg22";;
        23) echo -e "$msg23";;
    esac
    sleep 2s
    printf "\033[1A\033[K" # Limpa a linha de forma portátil
    printf "\033[1A\033[K"
}

# Função para reiniciar o serviço V2Ray
restart_v2ray() {
    if command -v v2ray >/dev/null 2>&1; then
        v2ray restart >/dev/null 2>&1
        if [[ $? -eq 0 ]]; then
            log_action "Serviço V2Ray reiniciado"
            return 0
        else
            log_action "Erro ao reiniciar V2Ray"
            return 1
        fi
    else
        echo -e "${cor1}Erro: Comando v2ray não encontrado${scor}"
        log_action "Comando v2ray não encontrado"
        sleep 2s
        return 1
    fi
}

# Função para testar a configuração do V2Ray
test_v2ray_config() {
    if command -v v2ray >/dev/null 2>&1; then
        v2ray -test >/dev/null 2>&1
        if [[ $? -eq 0 ]]; then
            return 0
        else
            log_action "Configuração V2Ray inválida"
            return 1
        fi
    else
        echo -e "${cor1}Erro: Comando v2ray não encontrado${scor}"
        log_action "Comando v2ray não encontrado"
        sleep 2s
        return 1
    fi
}

# Função para atualizar o banco de dados de usuários
update_userdb() {
    local db_file="/etc/SSHPlus/RegV2ray"
    [[ ! -e "$db_file" ]] && touch "$db_file"
    sort "$db_file" | uniq > "${db_file}tmp"
    mv -f "${db_file}tmp" "$db_file"
    log_action "Banco de dados de usuários atualizado"
}

# Função para verificar status do V2Ray
check_v2ray_status() {
    if command -v ss >/dev/null 2>&1 && ss -tunlp | grep v2ray >/dev/null 2>&1; then
        echo -e "\e[92mATIVADO"
        return 0
    elif command -v netstat >/dev/null 2>&1 && netstat -tunlp | grep v2ray >/dev/null 2>&1; then
        echo -e "\e[92mATIVADO"
        return 0
    else
        echo -e "\e[91mDESATIVADO"
        return 1
    fi
}

# Função para validar portas
validate_port() {
    local port=$1
    if [[ ! "$port" =~ ^[0-9]+$ ]] || [[ "$port" -lt 1 ]] || [[ "$port" -gt 65535 ]]; then
        return 1
    fi
    return 0
}

# Função para validar domínio e verificar resolução para o IP da VPS
validate_domain() {
    local domain=$1
    # Verificar formato do domínio
    if [[ -z "$domain" ]] || [[ "$domain" =~ [[:space:]] ]]; then
        return 1
    fi
    if [[ ! "$domain" =~ ^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
        return 1
    fi
    # Verificar resolução do domínio
    if command -v dig >/dev/null 2>&1; then
        local resolved_ip=$(dig +short "$domain" | head -1)
        if [[ -z "$resolved_ip" ]]; then
            return 1
        fi
        # Obter IP da VPS (supondo interface eth0 ou similar)
        local vps_ip=$(ip addr show | grep -oP 'inet \K[\d.]+' | grep -v '127.0.0.1' | head -1)
        if [[ -n "$vps_ip" && "$resolved_ip" != "$vps_ip" ]]; then
            log_action "Domínio $domain resolve para $resolved_ip, mas o IP da VPS é $vps_ip"
            return 2
        fi
    fi
    return 0
}

# Função para gerar e-mail único
generate_unique_email() {
    local email
    local max_attempts=10
    local attempt=1
    while [[ $attempt -le $max_attempts ]]; do
        email=$(cat /dev/urandom | tr -dc 'a-z0-9' | head -c 10)@gmail.com
        if ! grep -q "$email" /etc/v2ray/config.json; then
            echo "$email"
            return 0
        fi
        ((attempt++))
    done
    echo -e "${cor1}Erro: Não foi possível gerar um e-mail único${scor}"
    return 1
}

# Função para fazer backup da configuração
backup_v2ray_config() {
    local backup_file="/etc/SSHPlus/v2ray/config.json.bak.$(date +%F_%H%M%S)"
    if [[ -f "/etc/v2ray/config.json" ]]; then
        cp /etc/v2ray/config.json "$backup_file"
        log_action "Backup da configuração criado: $backup_file"
        echo "$backup_file"
        return 0
    else
        log_action "Arquivo de configuração /etc/v2ray/config.json não encontrado"
        return 1
    fi
}

# Função para restaurar configuração
restore_v2ray_config() {
    local backup_file=$1
    if [[ -f "$backup_file" && -f "/etc/v2ray/config.json" ]]; then
        cp "$backup_file" /etc/v2ray/config.json
        log_action "Configuração restaurada a partir de: $backup_file"
        return 0
    else
        log_action "Falha ao restaurar configuração: backup $backup_file ou /etc/v2ray/config.json não encontrado"
        return 1
    fi
}

# Função para instalar o V2Ray
intallv2ray() {
    source <(curl -sL https://raw.githubusercontent.com/PhoenixxZ2023/NEW-SSHPLUS/main/Modulos/v2ray)
    if [[ $? -eq 0 ]]; then
        echo -e "${GREEN}INSTALADO COM SUCESSO ✅!${SCOLOR}"
        log_action "V2Ray instalado"
        update_userdb
    else
        echo -e "${cor1}Erro: Falha ao instalar V2Ray${scor}"
        log_action "Erro ao instalar V2Ray"
        sleep 2s
    fi
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "${YELLOW}• Enter Para Continuar${SCOLOR}" && read enter
    fun_v2raymanager
}

# Função para editar protocolo V2Ray
protocolv2ray() {
    echo -e "\E[44;1;37m            EDITAR PROTOCOLO V2RAY             \E[0m"
    echo -e "${YELLOW}• SELECIONE UM PROTOCOLO:${SCOLOR}"
    echo -e "${YELLOW}  [1] TCP${SCOLOR}"
    echo -e "${YELLOW}  [2] gRPC${SCOLOR}"
    echo -e "${YELLOW}  [3] WebSocket${SCOLOR}"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    while true; do
        echo -ne "\e[91m >> DIGITE O NÚMERO DO PROTOCOLO (1-3): \033[1;92m" && read protocol_choice
        case $protocol_choice in
            1) protocol="tcp"; break ;;
            2) protocol="grpc"; break ;;
            3) protocol="ws"; break ;;
            *) err_fun 18; continue ;;
        esac
    done
    echo -e "${YELLOW}• AVISO: Certifique-se de que o domínio aponta para o IP da VPS (verifique com 'dig exemplo.com')${SCOLOR}"
    err_fun 23
    while true; do
        echo -ne "\e[91m >> DIGITE O DOMÍNIO OU HOST (ex.: exemplo.com): \033[1;92m" && read domain
        validate_domain "$domain"
        local validate_result=$?
        if [[ $validate_result -eq 0 ]]; then
            break
        elif [[ $validate_result -eq 2 ]]; then
            err_fun 21
        else
            err_fun 19
        fi
    done
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    # Fazer backup da configuração
    local backup_file=$(backup_v2ray_config)
    if [[ $? -ne 0 ]]; then
        echo -e "${cor1}Erro: Falha ao fazer backup da configuração${scor}"
        log_action "Falha ao fazer backup da configuração antes de alterar protocolo"
        sleep 2s
        fun_v2raymanager
    fi
    # Verificar se o V2Ray está instalado
    if [[ ! -f "/usr/bin/v2ray/v2ray" ]]; then
        echo -e "${cor1}Erro: V2Ray não está instalado${scor}"
        log_action "Tentativa de alterar protocolo falhou: V2Ray não instalado"
        sleep 2s
        fun_v2raymanager
    fi
    # Aplicar protocolo
    v2ray stream --protocol "$protocol" --domain "$domain" >/dev/null 2>&1
    if [[ $? -eq 0 ]]; then
        # Testar configuração
        if test_v2ray_config; then
            if restart_v2ray; then
                log_action "Protocolo V2Ray alterado: $protocol, Domínio: $domain"
                echo -e "${GREEN}Protocolo alterado com sucesso!${SCOLOR}"
            else
                echo -e "${cor1}Erro: Falha ao reiniciar V2Ray. Restaurando configuração anterior.${scor}"
                restore_v2ray_config "$backup_file"
                restart_v2ray
                log_action "Falha ao reiniciar V2Ray após alterar protocolo. Configuração restaurada"
                sleep 2s
            fi
        else
            echo -e "$msg22"
            restore_v2ray_config "$backup_file"
            restart_v2ray
            log_action "Configuração inválida após alterar protocolo. Configuração restaurada"
            sleep 2s
        fi
    else
        echo -e "$msg20"
        restore_v2ray_config "$backup_file"
        restart_v2ray
        log_action "Erro ao aplicar protocolo V2Ray: $protocol, Domínio: $domain. Configuração restaurada"
        sleep 2s
    fi
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "${YELLOW}• Enter Para Continuar${SCOLOR}" && read enter
    fun_v2raymanager
}

# Função para ativar/desativar TLS
tls() {
    echo -e "\E[44;1;37m            ATIVAR OU DESATIVAR TLS             \E[0m"
    echo -e "${YELLOW}• SELECIONE UMA OPÇÃO:${SCOLOR}"
    echo -e "${YELLOW}  [1] Ativar TLS${SCOLOR}"
    echo -e "${YELLOW}  [2] Desativar TLS${SCOLOR}"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    while true; do
        echo -ne "\e[91m >> DIGITE O NÚMERO DA OPÇÃO (1-2): \033[1;92m" && read tls_choice
        case $tls_choice in
            1) tls_action="enable"; break ;;
            2) tls_action="disable"; break ;;
            *) err_fun 18; continue ;;
        esac
    done
    local domain=""
    if [[ "$tls_action" == "enable" ]]; then
        echo -e "${YELLOW}• AVISO: Certifique-se de que o domínio aponta para o IP da VPS (verifique com 'dig exemplo.com')${SCOLOR}"
        err_fun 23
        while true; do
            echo -ne "\e[91m >> DIGITE O DOMÍNIO (ex.: exemplo.com): \033[1;92m" && read domain
            validate_domain "$domain"
            local validate_result=$?
            if [[ $validate_result -eq 0 ]]; then
                break
            elif [[ $validate_result -eq 2 ]]; then
                err_fun 21
            else
                err_fun 19
            fi
        done
    fi
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    # Fazer backup da configuração
    local backup_file=$(backup_v2ray_config)
    if [[ $? -ne 0 ]]; then
        echo -e "${cor1}Erro: Falha ao fazer backup da configuração${scor}"
        log_action "Falha ao fazer backup da configuração antes de alterar TLS"
        sleep 2s
        fun_v2raymanager
    fi
    # Verificar se o V2Ray está instalado
    if [[ ! -f "/usr/bin/v2ray/v2ray" ]]; then
        echo -e "${cor1}Erro: V2Ray não está instalado${scor}"
        log_action "Tentativa de alterar TLS falhou: V2Ray não instalado"
        sleep 2s
        fun_v2raymanager
    fi
    # Aplicar configuração TLS
    if [[ "$tls_action" == "enable" ]]; then
        v2ray tls --enable --domain "$domain" >/dev/null 2>&1
    else
        v2ray tls --disable >/dev/null 2>&1
    fi
    if [[ $? -eq 0 ]]; then
        # Testar configuração
        if test_v2ray_config; then
            if restart_v2ray; then
                log_action "TLS $tls_action: Domínio: ${domain:-N/A}"
                echo -e "${GREEN}TLS configurado com sucesso!${SCOLOR}"
            else
                echo -e "${cor1}Erro: Falha ao reiniciar V2Ray. Restaurando configuração anterior.${scor}"
                restore_v2ray_config "$backup_file"
                restart_v2ray
                log_action "Falha ao reiniciar V2Ray após alterar TLS. Configuração restaurada"
                sleep 2s
            fi
        else
            echo -e "$msg22"
            restore_v2ray_config "$backup_file"
            restart_v2ray
            log_action "Configuração inválida após alterar TLS. Configuração restaurada"
            sleep 2s
        fi
    else
        echo -e "$msg20"
        restore_v2ray_config "$backup_file"
        restart_v2ray
        log_action "Erro ao aplicar configuração TLS: $tls_action, Domínio: ${domain:-N/A}. Configuração restaurada"
        sleep 2s
    fi
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "${YELLOW}• Enter Para Continuar${SCOLOR}" && read enter
    fun_v2raymanager
}

# Função para editar porta V2Ray
portv() {
    echo -e "\E[44;1;37m            EDITAR PORTA V2RAY             \E[0m"
    v2ray port
    log_action "Porta V2Ray editada"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "${YELLOW}• Enter Para Continuar${SCOLOR}" && read enter
    fun_v2raymanager
}

# Função para exibir estatísticas de consumo
stats() {
    echo -e "\E[44;1;37m            ESTATÍSTICAS DE CONSUMO             \E[0m"
    v2ray stats
    log_action "Estatísticas de consumo exibidas"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "${YELLOW}• Enter Para Continuar${SCOLOR}" && read enter
    fun_v2raymanager
}

# Função para desinstalar V2Ray
unistallv2() {
    source <(curl -sL https://raw.githubusercontent.com/PhoenixxZ2023/NEW-SSHPLUS/main/Modulos/v2ray) --remove >/dev/null 2>&1
    rm -rf /etc/SSHPlus/RegV2ray >/dev/null 2>&1
    echo -e "\n${GREEN}V2RAY REMOVIDO COM SUCESSO!${SCOLOR}"
    log_action "V2Ray desinstalado"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "${YELLOW}• Enter Para Continuar${SCOLOR}" && read enter
    fun_v2raymanager
}

# Função para exibir informações da conta
infocuenta() {
    echo -e "\E[44;1;37m            INFORMAÇÕES DA CONTA             \E[0m"
    v2ray info
    log_action "Informações da conta exibidas"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "${YELLOW}• Enter Para Continuar${SCOLOR}" && read enter
    fun_v2raymanager
}

# Função para adicionar usuário
addusr() {
    echo -e "\E[44;1;37m            ADICIONAR USUÁRIO | UUID V2RAY             \E[0m"
    # Verificar se o arquivo de configuração existe
    [[ ! -f "/etc/v2ray/config.json" ]] && {
        echo -e "${cor1}Erro: Arquivo de configuração V2Ray não encontrado${scor}"
        log_action "Tentativa de adicionar usuário falhou: Configuração não encontrada"
        sleep 2s
        fun_v2raymanager
    }
    # Gerar UUID e verificar duplicatas
    UUID=$(uuidgen)
    if grep -q "$UUID" /etc/SSHPlus/RegV2ray; then
        echo -e "${cor1}Erro: UUID já existe${scor}"
        log_action "Tentativa de adicionar usuário falhou: UUID duplicado"
        sleep 2s
        fun_v2raymanager
    fi
    # Gerar e-mail único
    USERMAIL=$(generate_unique_email)
    [[ $? -ne 0 ]] && {
        echo -e "$USERMAIL"
        log_action "Falha ao gerar e-mail único para novo usuário"
        sleep 2s
        fun_v2raymanager
    }
    # Adicionar ao arquivo de configuração
    sed -i '13i\           \{' /etc/v2ray/config.json
    sed -i '14i\           \"alterId": 0,' /etc/v2ray/config.json
    sed -i '15i\           \"id": "'$UUID'",' /etc/v2ray/config.json
    sed -i '16i\           \"email": "'$USERMAIL'"' /etc/v2ray/config.json
    sed -i '17i\           \},' /etc/v2ray/config.json
    while true; do
        echo -ne "\e[91m >> DIGITE UM USUÁRIO: \033[1;92m"
        read -p ": " nick
        nick="$(echo $nick | sed -e 's/[^a-z0-9 -]//ig')"
        if [[ -z $nick ]]; then
            err_fun 17 && continue
        elif [[ "${#nick}" -lt "2" ]]; then
            err_fun 2 && continue
        elif [[ "${#nick}" -gt "5" ]]; then
            err_fun 3 && continue
        elif grep -q "|$nick|" /etc/SSHPlus/RegV2ray; then
            err_fun 14 && continue
        fi
        break
    done
    echo -e "\e[91m >> ADICIONAR UUID: \e[92m$UUID "
    while true; do
        echo -ne "\e[91m >> DURAÇÃO DO UUID (DIAS):\033[1;92m " && read diasuser
        if [[ -z "$diasuser" ]]; then
            err_fun 17 && continue
        elif [[ "$diasuser" != +([0-9]) ]]; then
            err_fun 8 && continue
        elif [[ "$diasuser" -gt "360" ]]; then
            err_fun 9 && continue
        fi
        break
    done
    valid=$(date '+%C%y-%m-%d' -d " +$diasuser days")
    datexp=$(date "+%F" -d " + $diasuser days")
    echo -e "\e[91m >> EXPIRA EM: \e[92m$datexp "
    # Registrar no banco de dados
    echo "  $UUID | $nick | $valid " >> /etc/SSHPlus/RegV2ray
    Fecha=$(date +%d-%m-%y-%R)
    cp /etc/SSHPlus/RegV2ray /etc/SSHPlus/v2ray/RegV2ray-"$Fecha"
    restart_v2ray
    echo ""
    v2ray info >/etc/SSHPlus/v2ray/confuuid.log
    lineP=$(sed -n '/'${UUID}'/=' /etc/SSHPlus/v2ray/confuuid.log)
    numl1=4
    let suma=$lineP+$numl1
    sed -n ${suma}p /etc/SSHPlus/v2ray/confuuid.log
    echo ""
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\e[92m           UUID ADICIONADO COM SUCESSO "
    log_action "Usuário adicionado: $nick, UUID: $UUID, Expira em: $datexp"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "${YELLOW}• Enter Para Continuar${SCOLOR}" && read enter
    fun_v2raymanager
}

# Função para remover usuário
delusr() {
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[44;1;37m            REMOVER USUÁRIO | UUID V2RAY             \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\e[97m               USUÁRIOS REGISTRADOS"
    echo -e "\e[33m$(cat /etc/SSHPlus/RegV2ray | cut -d '|' -f2,1)"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -ne "\e[91m >> DIGITE UUID PARA REMOVER:\n \033[1;92m " && read uuidel
    invaliduuid() {
        echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        echo -e "\e[91m                    UUID INVÁLIDO \n"
        echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        echo -e "${YELLOW}• Enter Para Continuar${SCOLOR}" && read enter
        fun_v2raymanager
    }
    [[ ! -f "/etc/v2ray/config.json" ]] && {
        echo -e "${cor1}Erro: Arquivo de configuração V2Ray não encontrado${scor}"
        log_action "Tentativa de remover usuário falhou: Configuração não encontrada"
        sleep 2s
        fun_v2raymanager
    }
    [[ $(sed -n '/'${uuidel}'/=' /etc/v2ray/config.json | head -1) ]] || invaliduuid
    lineP=$(sed -n '/'${uuidel}'/=' /etc/v2ray/config.json)
    linePre=$(sed -n '/'${uuidel}'/=' /etc/SSHPlus/RegV2ray)
    sed -i "${linePre}d" /etc/SSHPlus/RegV2ray
    numl1=2
    let resta=$lineP-$numl1
    sed -i "${resta}d" /etc/v2ray/config.json
    sed -i "${resta}d" /etc/v2ray/config.json
    sed -i "${resta}d" /etc/v2ray/config.json
    sed -i "${resta}d" /etc/v2ray/config.json
    sed -i "${resta}d" /etc/v2ray/config.json
    restart_v2ray
    echo ""
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\e[92m           UUID REMOVIDO COM SUCESSO "
    log_action "Usuário removido: UUID $uuidel"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "${YELLOW}• Enter Para Continuar${SCOLOR}" && read enter
    fun_v2raymanager
}

# Função para mostrar usuários registrados
mosusr_kk() {
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[44;1;37m            USUÁRIOS REGISTRADOS | UUID V2RAY             \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    VPSsec=$(date +%s)
    local HOST="/etc/SSHPlus/RegV2ray"
    if [[ ! -f "$HOST" ]]; then
        echo -e "----- NENHUM USUÁRIO REGISTRADO -----"
        echo -e "${YELLOW}• Enter Para Continuar${SCOLOR}" && read enter
        fun_v2raymanager
    fi
    local RETURN="$(cat $HOST | cut -d'|' -f2)"
    local IDEUUID="$(cat $HOST | cut -d'|' -f1)"
    if [[ -z $RETURN ]]; then
        echo -e "----- NENHUM USUÁRIO REGISTRADO -----"
        echo -e "${YELLOW}• Enter Para Continuar${SCOLOR}" && read enter
        fun_v2raymanager
    else
        i=1
        echo -e "\e[97m                 UUID                | USUÁRIO | EXPIRAÇÃO \e[93m"
        echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        while read hostreturn; do
            DateExp="$(cat /etc/SSHPlus/RegV2ray | grep -w "$hostreturn" | cut -d'|' -f3)"
            if [[ ! -z $DateExp ]]; then
                DataSec=$(date +%s --date="$DateExp")
                [[ "$VPSsec" -gt "$DataSec" ]] && EXPTIME="\e[91m[EXPIRADO]\e[97m" || EXPTIME="\e[92m[$(($(($DataSec - $VPSsec)) / 86400))]\e[97m Dias"
            else
                EXPTIME="\e[91m[ S/R ]"
            fi
            usris="$(cat /etc/SSHPlus/RegV2ray | grep -w "$hostreturn" | cut -d'|' -f2)"
            local contador_secuencial+="\e[93m$hostreturn \e[97m|\e[93m$usris\e[97m|\e[93m $EXPTIME \n"
            if [[ $i -gt 30 ]]; then
                echo -e "$contador_secuencial"
                unset contador_secuencial
                unset i
            fi
            let i++
        done <<<"$IDEUUID"
        [[ ! -z $contador_secuencial ]] && {
            linesss=$(cat /etc/SSHPlus/RegV2ray | wc -l)
            echo -e "$contador_secuencial \n Número de Registrados: $linesss"
        }
    fi
    log_action "Lista de usuários registrados exibida"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "${YELLOW}• Enter Para Continuar${SCOLOR}" && read enter
    fun_v2raymanager
}

# Função para limitar portas
lim_port() {
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[44;1;37m            LIMITAR MB POR PORTA | UUID V2RAY             \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    # Função para exibir estatísticas de portas limitadas
    estarts() {
        VPSsec=$(date +%s)
        local HOST="/etc/SSHPlus/v2ray/lisportt.log"
        if [[ ! -f "$HOST" ]]; then
            echo -e "----- NENHUMA PORTA REGISTRADA -----"
            echo -e "${YELLOW}• Enter Para Continuar${SCOLOR}" && read enter
            fun_v2raymanager
        fi
        local RETURN="$(cat $HOST | cut -d'|' -f2)"
        local IDEUUID="$(cat $HOST | cut -d'|' -f1)"
        if [[ -z $RETURN ]]; then
            echo -e "----- NENHUMA PORTA REGISTRADA -----"
            echo -e "${YELLOW}• Enter Para Continuar${SCOLOR}" && read enter
            fun_v2raymanager
        else
            i=1
            while read hostreturn; do
                iptables -n -v -L >/etc/SSHPlus/v2ray/data1.log
                statsss=$(cat /etc/SSHPlus/v2ray/data1.log | grep -w "tcp spt:$hostreturn quota:" | cut -d' ' -f3,4,5)
                gblim=$(cat /etc/SSHPlus/v2ray/lisportt.log | grep -w "$hostreturn" | cut -d'|' -f2)
                local contador_secuencial+="         \e[97mPORTA: \e[93m$hostreturn \e[97m|\e[93m$statsss \e[97m|\e[93m $gblim GB  \n"
                if [[ $i -gt 30 ]]; then
                    echo -e "$contador_secuencial"
                    unset contador_secuencial
                    unset i
                fi
                let i++
            done <<<"$IDEUUID"
            [[ ! -z $contador_secuencial ]] && {
                linesss=$(cat /etc/SSHPlus/v2ray/lisportt.log | wc -l)
                echo -e "$contador_secuencial \n Portas Limitadas: $linesss"
            }
        fi
        log_action "Estatísticas de portas limitadas exibidas"
        echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        echo -e "${YELLOW}• Enter Para Continuar${SCOLOR}" && read enter
        fun_v2raymanager
    }
    # Função para limitar dados por porta
    liport() {
        while true; do
            echo -ne "\e[91m >> DIGITE PORTA A LIMITAR:\033[1;92m " && read portbg
            if [[ -z "$portbg" ]]; then
                err_fun 17 && continue
            elif ! validate_port "$portbg"; then
                err_fun 16 && continue
            fi
            break
        done
        while true; do
            echo -ne "\e[91m >> DIGITE QUANTIDADE DE GB:\033[1;92m " && read capgb
            if [[ -z "$capgb" ]]; then
                err_fun 17 && continue
            elif [[ "$capgb" != +([0-9]) ]] || [[ "$capgb" -lt 1 ]] || [[ "$capgb" -gt 1000 ]]; then
                err_fun 15 && continue
            fi
            break
        done
        uml1=1073741824
        gbuser="$capgb"
        let multiplicacion=$uml1*$gbuser
        sudo iptables -I OUTPUT -p tcp --sport $portbg -j DROP
        sudo iptables -I OUTPUT -p tcp --sport $portbg -m quota --quota $multiplicacion -j ACCEPT
        iptables-save >/etc/iptables/rules.v4
        echo ""
        echo -e " Porta Selecionada: $portbg | Quantidade de GB: $gbuser"
        echo ""
        echo " $portbg | $gbuser | $multiplicacion " >> /etc/SSHPlus/v2ray/lisportt.log
        log_action "Limite de dados aplicado: Porta $portbg, $gbuser GB"
        echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        echo -e "${YELLOW}• Enter Para Continuar${SCOLOR}" && read enter
        fun_v2raymanager
    }
    # Função para restaurar dados de porta
    resdata() {
        VPSsec=$(date +%s)
        local HOST="/etc/SSHPlus/v2ray/lisportt.log"
        if [[ ! -f "$HOST" ]]; then
            echo -e "----- NENHUMA PORTA REGISTRADA -----"
            echo -e "${YELLOW}• Enter Para Continuar${SCOLOR}" && read enter
            fun_v2raymanager
        fi
        local RETURN="$(cat $HOST | cut -d'|' -f2)"
        local IDEUUID="$(cat $HOST | cut -d'|' -f1)"
        if [[ -z $RETURN ]]; then
            echo -e "----- NENHUMA PORTA REGISTRADA -----"
            echo -e "${YELLOW}• Enter Para Continuar${SCOLOR}" && read enter
            fun_v2raymanager
        else
            i=1
            while read hostreturn; do
                iptables -n -v -L >/etc/SSHPlus/v2ray/data1.log
                statsss=$(cat /etc/SSHPlus/v2ray/data1.log | grep -w "tcp spt:$hostreturn quota:" | cut -d' ' -f3,4,5)
                gblim=$(cat /etc/SSHPlus/v2ray/lisportt.log | grep -w "$hostreturn" | cut -d'|' -f2)
                local contador_secuencial+="         \e[97mPORTA: \e[93m$hostreturn \e[97m|\e[93m$statsss \e[97m|\e[93m $gblim GB  \n"
                if [[ $i -gt 30 ]]; then
                    echo -e "$contador_secuencial"
                    unset contador_secuencial
                    unset i
                fi
                let i++
            done <<<"$IDEUUID"
            [[ ! -z $contador_secuencial ]] && {
                linesss=$(cat /etc/SSHPlus/v2ray/lisportt.log | wc -l)
                echo -e "$contador_secuencial \n Portas Limitadas: $linesss"
            }
        fi
        echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        while true; do
            echo -ne "\e[91m >> DIGITE PORTA A LIMPAR:\033[1;92m " && read portbg
            if [[ -z "$portbg" ]]; then
                err_fun 17 && continue
            elif ! validate_port "$portbg"; then
                err_fun 16 && continue
            fi
            break
        done
        invaliduuid() {
            echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
            echo -e "\e[91m                PORTA INVÁLIDA \n"
            echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
            echo -e "${YELLOW}• Enter Para Continuar${SCOLOR}" && read enter
            fun_v2raymanager
        }
        [[ $(sed -n '/'${portbg}'/=' /etc/SSHPlus/v2ray/lisportt.log | head -1) ]] || invaliduuid
        gblim=$(cat /etc/SSHPlus/v2ray/lisportt.log | grep -w "$portbg" | cut -d'|' -f3)
        sudo iptables -D OUTPUT -p tcp --sport $portbg -j DROP
        sudo iptables -D OUTPUT -p tcp --sport $portbg -m quota --quota $gblim -j ACCEPT
        iptables-save >/etc/iptables/rules.v4
        lineP=$(sed -n '/'${portbg}'/=' /etc/SSHPlus/v2ray/lisportt.log)
        sed -i "${lineP}d" /etc/SSHPlus/v2ray/lisportt.log
        log_action "Limite de dados removido: Porta $portbg"
        echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        echo -e "${YELLOW}• Enter Para Continuar${SCOLOR}" && read enter
        fun_v2raymanager
    }
    # Menu de limitação de portas
    echo -e "${YELLOW}[1] > LIMITAR DADOS POR PORTA${SCOLOR}"
    echo -e "${YELLOW}[2] > RESTAURAR DADOS DA PORTA${SCOLOR}"
    echo -e "${YELLOW}[3] > VER DADOS CONSUMIDOS${SCOLOR}"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "${GREEN} [0] > \e[97m\033[1;41m VOLTAR \033[1;37m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    selection=$(selection_fun 3)
    case ${selection} in
        1) liport ;;
        2) resdata ;;
        3) estarts ;;
        0) fun_v2raymanager ;;
    esac
}

# Função para ativar/desativar o limpador de expirados
limpiador_activador() {
    unset PIDGEN
    PIDGEN=$(ps aux | grep -v grep | grep "limv2ray")
    if [[ ! $PIDGEN ]]; then
        screen -dmS limv2ray watch -n 21600 limv2ray
        log_action "Limpador de expirados ativado"
        statgen="\e[92m [ ATIVADO ] "
    else
        screen -S limv2ray -p 0 -X quit
        log_action "Limpador de expirados desativado"
        statgen="\e[91m [ DESATIVADO ] "
    fi
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[44;1;37m            REMOVER EXPIRADOS | UUID V2RAY             \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo ""
    echo -e "                    $statgen "
    echo ""
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "${YELLOW}• Enter Para Continuar${SCOLOR}" && read enter
    fun_v2raymanager
}

# Função para validar seleção do menu
selection_fun() {
    local selection="null"
    local range
    for ((i=0; i<=$1; i++)); do range[$i]="$i "; done
    while [[ ! $(echo ${range[*]} | grep -w "$selection") ]]; do
        echo -ne "${YELLOW} ► Selecione uma Opção: ${SCOLOR}" >&2
        read selection
        printf "\033[1A\033[K" >&2
    done
    echo $selection
}

# Função principal do gerenciador V2Ray (inalterada)
fun_v2raymanager() {
    while true $x != "ok"; do
        clear
        echo -e "\033[1;36m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\033[0m"
        echo -e "\033[1;36m┃\E[46;1;97m            GERENCIADOR V2RAY            \E[0m\033[1;36m┃"
        echo -e "\033[1;36m┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫\033[0m"
        xv2ray1=$(check_v2ray_status)
        printf "\033[1;36m┃\033[1;32mSERVICO: \033[1;33mV2RAY %s\033[1;37m                \033[1;36m┃\n" "$xv2ray1"
        xv2ray=$(check_v2ray_status >/dev/null && echo -e "\033[1;32m◉ " || echo -e "\033[1;31m○ ")
        echo -e "\033[1;36m┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫\033[0m"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m01\033[1;31m] \033[1;37m• \033[1;33mINSTALAR V2RAY $xv2ray                 \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m02\033[1;31m] \033[1;37m• \033[1;33mALTERAR PROTOCOLO                 \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m03\033[1;31m] \033[1;37m• \033[1;33mATIVAR TLS                        \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m04\033[1;31m] \033[1;37m• \033[1;33mEDITAR PORTA V2RAY                \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m05\033[1;31m] \033[1;37m• \033[1;33mADICIONAR USUÁRIO UUID            \033[1;36m┃"
        echo -e "\0331;36m┃\033[1;31m[\033[1;96m06\033[1;31m] \033[1;37m• \033[1;33mREMOVER USUÁRIO UUID              \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m07\033[1;31m] \033[1;37m• \033[1;33mMOSTRAR USUÁRIOS REGISTRADOS      \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m08\033[1;31m] \033[1;37m• \033[1;33mINFORMAÇÕES DA CONTA              \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m09\033[1;31m] \033[1;37m• \033[1;33mESTATÍSTICAS DE CONSUMO           \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m10\033[1;31m] \033[1;37m• \033[1;33mLIMITADOR POR CONSUMO             \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m11\033[1;31m] \033[1;37m• \033[1;33mREMOVER EXPIRADOS$statgen  \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m12\033[1;31m] \033[1;37m• \033[1;33mDESINSTALAR V2RAY                 \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m13\033[1;31m] \033[1;37m• \033[1;33mVOLTAR \033[1;32m<\033[1;33m<\033[1;31m<                        \033[1;36m┃"
        echo -e "\033[1;36m┃\033[1;31m[\033[1;96m00\033[1;31m] \033[1;37m• \033[1;33mSAIR \033[1;32m<\033[1;33m<\033[1;31m<                          \033[1;36m┃"
        echo -e "\033[1;36m┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\033[0m"
        tput civis
        echo -ne "\033[1;36m┗➤\033[1;32m ESCOLHA UMA OPÇÃO \033[1;32m?\033[1;32m?\033[1;37m: "
        read x
        tput cnorm
        clear
        case $x in
            1 | 01) intallv2ray ;;
            2 | 02) protocolv2ray ;;
            3 | 03) tls ;;
            4 | 04) portv ;;
            5 | 05) addusr ;;
            6 | 06) delusr ;;
            7 | 07) mosusr_kk ;;
            8 | 08) infocuenta ;;
            9 | 09) stats ;;
            10) lim_port ;;
            11) limpiador_activador ;;
            12) unistallv2 ;;
            13) conexao; exit ;;
            0 | 00)
                echo -e "\033[1;31mSaindo...\033[0m"
                sleep 1
                clear
                exit
                ;;
            *)
                echo -e "\033[1;31mOpção inválida!\033[0m"
                sleep 2
                ;;
        esac
    done
}

# Verificar status do limpador de expirados
PID_GEN=$(ps x | grep -v grep | grep "limv2ray")
[[ ! $PID_GEN ]] && PID_GEN="\e[91m [ DESATIVADO ] " || PID_GEN="\e[92m [ ATIVADO ] "
statgen="$(echo $PID_GEN)"

# Iniciar o gerenciador
fun_v2raymanager
